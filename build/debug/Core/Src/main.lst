ARM GAS  /tmp/ccMXfGQo.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.InitializeCANMessage,"ax",%progbits
  18              		.align	1
  19              		.global	InitializeCANMessage
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	InitializeCANMessage:
  27              	.LFB134:
  28              		.file 1 "Core/Src/main.c"
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2024 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** #include "can.h"
  22:Core/Src/main.c **** #include "tim.h"
  23:Core/Src/main.c **** #include "usart.h"
  24:Core/Src/main.c **** #include "gpio.h"
  25:Core/Src/main.c **** 
  26:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  27:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  28:Core/Src/main.c **** 
  29:Core/Src/main.c **** /* USER CODE END Includes */
  30:Core/Src/main.c **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 2


  31:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  32:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  33:Core/Src/main.c **** 
  34:Core/Src/main.c **** /* USER CODE END PTD */
  35:Core/Src/main.c **** 
  36:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  37:Core/Src/main.c **** /* USER CODE BEGIN PD */
  38:Core/Src/main.c **** 
  39:Core/Src/main.c **** /* USER CODE END PD */
  40:Core/Src/main.c **** 
  41:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  42:Core/Src/main.c **** /* USER CODE BEGIN PM */
  43:Core/Src/main.c **** 
  44:Core/Src/main.c **** /* USER CODE END PM */
  45:Core/Src/main.c **** 
  46:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  47:Core/Src/main.c **** 
  48:Core/Src/main.c **** /* USER CODE BEGIN PV */
  49:Core/Src/main.c **** typedef struct {
  50:Core/Src/main.c ****     uint8_t AIR_POS_cmd_isActive : 1;
  51:Core/Src/main.c ****     uint8_t AIR_POS_isClosed : 1;
  52:Core/Src/main.c ****     uint8_t AIR_NEG_cmd_isActive : 1;
  53:Core/Src/main.c ****     uint8_t AIR_NEG_isClosed : 1;
  54:Core/Src/main.c ****     uint8_t DCBUS_PRECH_RLY_cmd_isActive : 1;
  55:Core/Src/main.c ****     uint8_t DCBUS_PRECH_RLY_isClosed : 1;
  56:Core/Src/main.c ****     uint8_t AMS_errIsActive : 1;
  57:Core/Src/main.c ****     uint8_t IMD_errIsActive : 1;
  58:Core/Src/main.c ****     uint8_t TSAL_green_isActive : 1;
  59:Core/Src/main.c ****     uint8_t DCBUS_isOver60V : 1;
  60:Core/Src/main.c ****     uint8_t IMP_any_isActive : 1;
  61:Core/Src/main.c ****     uint8_t IMP_HV_Relays_Signals_isActive : 1;
  62:Core/Src/main.c ****     uint8_t IMP_AIRS_Signals_isActive : 1;
  63:Core/Src/main.c ****     uint8_t AIR_POS_STG_mechStateSignal_isActive : 1;
  64:Core/Src/main.c ****     uint8_t AIR_NEG_STG_mechStateSignal_isActive : 1;
  65:Core/Src/main.c **** } CAN_MessageTypeDef; //each field takes up 1 bit to pack them later
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** CAN_MessageTypeDef canMessage; //to declare the struct globally
  68:Core/Src/main.c **** 
  69:Core/Src/main.c **** void InitializeCANMessage(void){
  29              		.loc 1 69 32 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  70:Core/Src/main.c ****   canMessage.AIR_POS_cmd_isActive = 0;
  34              		.loc 1 70 3 view .LVU1
  35              		.loc 1 70 35 is_stmt 0 view .LVU2
  36 0000 1E4B     		ldr	r3, .L2
  37 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  38 0004 6FF30002 		bfc	r2, #0, #1
  39 0008 1A70     		strb	r2, [r3]
  71:Core/Src/main.c ****   canMessage.AIR_POS_isClosed = 0;
  40              		.loc 1 71 3 is_stmt 1 view .LVU3
  41              		.loc 1 71 31 is_stmt 0 view .LVU4
  42 000a D2B2     		uxtb	r2, r2
  43 000c 6FF34102 		bfc	r2, #1, #1
  44 0010 1A70     		strb	r2, [r3]
ARM GAS  /tmp/ccMXfGQo.s 			page 3


  72:Core/Src/main.c ****   canMessage.AIR_NEG_cmd_isActive = 0;
  45              		.loc 1 72 3 is_stmt 1 view .LVU5
  46              		.loc 1 72 35 is_stmt 0 view .LVU6
  47 0012 D2B2     		uxtb	r2, r2
  48 0014 6FF38202 		bfc	r2, #2, #1
  49 0018 1A70     		strb	r2, [r3]
  73:Core/Src/main.c ****   canMessage.AIR_NEG_isClosed = 0;
  50              		.loc 1 73 3 is_stmt 1 view .LVU7
  51              		.loc 1 73 31 is_stmt 0 view .LVU8
  52 001a D2B2     		uxtb	r2, r2
  53 001c 6FF3C302 		bfc	r2, #3, #1
  54 0020 1A70     		strb	r2, [r3]
  74:Core/Src/main.c ****   canMessage.DCBUS_PRECH_RLY_cmd_isActive = 0;
  55              		.loc 1 74 3 is_stmt 1 view .LVU9
  56              		.loc 1 74 43 is_stmt 0 view .LVU10
  57 0022 D2B2     		uxtb	r2, r2
  58 0024 6FF30412 		bfc	r2, #4, #1
  59 0028 1A70     		strb	r2, [r3]
  75:Core/Src/main.c ****   canMessage.DCBUS_PRECH_RLY_isClosed = 0;
  60              		.loc 1 75 3 is_stmt 1 view .LVU11
  61              		.loc 1 75 39 is_stmt 0 view .LVU12
  62 002a D2B2     		uxtb	r2, r2
  63 002c 6FF34512 		bfc	r2, #5, #1
  64 0030 1A70     		strb	r2, [r3]
  76:Core/Src/main.c ****   canMessage.AMS_errIsActive = 0;
  65              		.loc 1 76 3 is_stmt 1 view .LVU13
  66              		.loc 1 76 30 is_stmt 0 view .LVU14
  67 0032 D2B2     		uxtb	r2, r2
  68 0034 6FF38612 		bfc	r2, #6, #1
  69 0038 1A70     		strb	r2, [r3]
  77:Core/Src/main.c ****   canMessage.IMD_errIsActive = 0;
  70              		.loc 1 77 3 is_stmt 1 view .LVU15
  71              		.loc 1 77 30 is_stmt 0 view .LVU16
  72 003a D2B2     		uxtb	r2, r2
  73 003c 6FF3C712 		bfc	r2, #7, #1
  74 0040 1A70     		strb	r2, [r3]
  78:Core/Src/main.c ****   canMessage.TSAL_green_isActive = 1;  //only TSAL green light is active
  75              		.loc 1 78 3 is_stmt 1 view .LVU17
  76              		.loc 1 78 34 is_stmt 0 view .LVU18
  77 0042 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
  78 0044 42F00102 		orr	r2, r2, #1
  79 0048 5A70     		strb	r2, [r3, #1]
  79:Core/Src/main.c ****   canMessage.DCBUS_isOver60V = 0;
  80              		.loc 1 79 3 is_stmt 1 view .LVU19
  81              		.loc 1 79 30 is_stmt 0 view .LVU20
  82 004a D2B2     		uxtb	r2, r2
  83 004c 6FF34102 		bfc	r2, #1, #1
  84 0050 5A70     		strb	r2, [r3, #1]
  80:Core/Src/main.c ****   canMessage.IMP_any_isActive = 0;
  85              		.loc 1 80 3 is_stmt 1 view .LVU21
  86              		.loc 1 80 31 is_stmt 0 view .LVU22
  87 0052 D2B2     		uxtb	r2, r2
  88 0054 6FF38202 		bfc	r2, #2, #1
  89 0058 5A70     		strb	r2, [r3, #1]
  81:Core/Src/main.c ****   canMessage.IMP_HV_Relays_Signals_isActive = 0;
  90              		.loc 1 81 3 is_stmt 1 view .LVU23
  91              		.loc 1 81 45 is_stmt 0 view .LVU24
ARM GAS  /tmp/ccMXfGQo.s 			page 4


  92 005a D2B2     		uxtb	r2, r2
  93 005c 6FF3C302 		bfc	r2, #3, #1
  94 0060 5A70     		strb	r2, [r3, #1]
  82:Core/Src/main.c ****   canMessage.IMP_AIRS_Signals_isActive = 0;
  95              		.loc 1 82 3 is_stmt 1 view .LVU25
  96              		.loc 1 82 40 is_stmt 0 view .LVU26
  97 0062 D2B2     		uxtb	r2, r2
  98 0064 6FF30412 		bfc	r2, #4, #1
  99 0068 5A70     		strb	r2, [r3, #1]
  83:Core/Src/main.c ****   canMessage.AIR_POS_STG_mechStateSignal_isActive = 0;
 100              		.loc 1 83 3 is_stmt 1 view .LVU27
 101              		.loc 1 83 51 is_stmt 0 view .LVU28
 102 006a D2B2     		uxtb	r2, r2
 103 006c 6FF34512 		bfc	r2, #5, #1
 104 0070 5A70     		strb	r2, [r3, #1]
  84:Core/Src/main.c ****   canMessage.AIR_NEG_STG_mechStateSignal_isActive = 0;
 105              		.loc 1 84 3 is_stmt 1 view .LVU29
 106              		.loc 1 84 51 is_stmt 0 view .LVU30
 107 0072 D2B2     		uxtb	r2, r2
 108 0074 6FF38612 		bfc	r2, #6, #1
 109 0078 5A70     		strb	r2, [r3, #1]
  85:Core/Src/main.c **** }
 110              		.loc 1 85 1 view .LVU31
 111 007a 7047     		bx	lr
 112              	.L3:
 113              		.align	2
 114              	.L2:
 115 007c 00000000 		.word	.LANCHOR0
 116              		.cfi_endproc
 117              	.LFE134:
 119              		.section	.text.PackCANMessage,"ax",%progbits
 120              		.align	1
 121              		.global	PackCANMessage
 122              		.syntax unified
 123              		.thumb
 124              		.thumb_func
 125              		.fpu fpv4-sp-d16
 127              	PackCANMessage:
 128              	.LVL0:
 129              	.LFB137:
  86:Core/Src/main.c **** 
  87:Core/Src/main.c **** 
  88:Core/Src/main.c **** /* USER CODE END PV */
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  91:Core/Src/main.c **** void SystemClock_Config(void);
  92:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  93:Core/Src/main.c **** 
  94:Core/Src/main.c **** /* USER CODE END PFP */
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
  97:Core/Src/main.c **** /* USER CODE BEGIN 0 */
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END 0 */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /**
 102:Core/Src/main.c ****   * @brief  The application entry point.
ARM GAS  /tmp/ccMXfGQo.s 			page 5


 103:Core/Src/main.c ****   * @retval int
 104:Core/Src/main.c ****   */
 105:Core/Src/main.c **** int main(void)
 106:Core/Src/main.c **** {
 107:Core/Src/main.c **** 
 108:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 109:Core/Src/main.c **** 
 110:Core/Src/main.c ****   /* USER CODE END 1 */
 111:Core/Src/main.c **** 
 112:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 113:Core/Src/main.c **** 
 114:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 115:Core/Src/main.c ****   HAL_Init();
 116:Core/Src/main.c **** 
 117:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 118:Core/Src/main.c **** 
 119:Core/Src/main.c ****   /* USER CODE END Init */
 120:Core/Src/main.c **** 
 121:Core/Src/main.c ****   /* Configure the system clock */
 122:Core/Src/main.c ****   SystemClock_Config();
 123:Core/Src/main.c **** 
 124:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 125:Core/Src/main.c **** 
 126:Core/Src/main.c ****   /* USER CODE END SysInit */
 127:Core/Src/main.c **** 
 128:Core/Src/main.c ****   /* Initialize all configured peripherals */
 129:Core/Src/main.c ****   MX_GPIO_Init();
 130:Core/Src/main.c ****   MX_CAN1_Init();
 131:Core/Src/main.c ****   MX_TIM2_Init();
 132:Core/Src/main.c ****   MX_USART2_UART_Init();
 133:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 134:Core/Src/main.c ****   InitializeCANMessage();
 135:Core/Src/main.c **** 
 136:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 137:Core/Src/main.c **** 
 138:Core/Src/main.c ****   /* USER CODE END 2 */
 139:Core/Src/main.c **** 
 140:Core/Src/main.c ****   /* Infinite loop */
 141:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 142:Core/Src/main.c ****   while (1)
 143:Core/Src/main.c ****   {
 144:Core/Src/main.c ****     /* USER CODE END WHILE */
 145:Core/Src/main.c **** 
 146:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 147:Core/Src/main.c ****   }
 148:Core/Src/main.c ****   /* USER CODE END 3 */
 149:Core/Src/main.c **** }
 150:Core/Src/main.c **** 
 151:Core/Src/main.c **** /**
 152:Core/Src/main.c ****   * @brief System Clock Configuration
 153:Core/Src/main.c ****   * @retval None
 154:Core/Src/main.c ****   */
 155:Core/Src/main.c **** void SystemClock_Config(void)
 156:Core/Src/main.c **** {
 157:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 158:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 159:Core/Src/main.c **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 6


 160:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 161:Core/Src/main.c ****   */
 162:Core/Src/main.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 163:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 166:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 167:Core/Src/main.c ****   */
 168:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 169:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 176:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 177:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178:Core/Src/main.c ****   {
 179:Core/Src/main.c ****     Error_Handler();
 180:Core/Src/main.c ****   }
 181:Core/Src/main.c **** 
 182:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 183:Core/Src/main.c ****   */
 184:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 185:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 186:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 187:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 189:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 190:Core/Src/main.c **** 
 191:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 192:Core/Src/main.c ****   {
 193:Core/Src/main.c ****     Error_Handler();
 194:Core/Src/main.c ****   }
 195:Core/Src/main.c **** }
 196:Core/Src/main.c **** 
 197:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 198:Core/Src/main.c **** uint32_t PackCANMessage(CAN_MessageTypeDef* message) {
 130              		.loc 1 198 54 is_stmt 1 view -0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 199:Core/Src/main.c ****   uint32_t packedData = 0; //now let's left shift every single bit individually
 135              		.loc 1 199 3 view .LVU33
 200:Core/Src/main.c ****   packedData |= (message->AIR_POS_cmd_isActive) << 0;
 136              		.loc 1 200 3 view .LVU34
 137              		.loc 1 200 25 is_stmt 0 view .LVU35
 138 0000 0378     		ldrb	r3, [r0]	@ zero_extendqisi2
 139 0002 03F00102 		and	r2, r3, #1
 140              	.LVL1:
 201:Core/Src/main.c ****   packedData |= (message->AIR_POS_isClosed) << 1;
 141              		.loc 1 201 3 is_stmt 1 view .LVU36
 142              		.loc 1 201 45 is_stmt 0 view .LVU37
 143 0006 03F00201 		and	r1, r3, #2
 144              		.loc 1 201 14 view .LVU38
ARM GAS  /tmp/ccMXfGQo.s 			page 7


 145 000a 1143     		orrs	r1, r1, r2
 146              	.LVL2:
 202:Core/Src/main.c ****   packedData |= (message->AIR_NEG_cmd_isActive) << 2;
 147              		.loc 1 202 3 is_stmt 1 view .LVU39
 148              		.loc 1 202 49 is_stmt 0 view .LVU40
 149 000c 03F00402 		and	r2, r3, #4
 150              		.loc 1 202 14 view .LVU41
 151 0010 0A43     		orrs	r2, r2, r1
 152              	.LVL3:
 203:Core/Src/main.c ****   packedData |= (message->AIR_NEG_isClosed) << 3;
 153              		.loc 1 203 3 is_stmt 1 view .LVU42
 154              		.loc 1 203 45 is_stmt 0 view .LVU43
 155 0012 03F00801 		and	r1, r3, #8
 156              		.loc 1 203 14 view .LVU44
 157 0016 0A43     		orrs	r2, r2, r1
 158              	.LVL4:
 204:Core/Src/main.c ****   packedData |= (message->DCBUS_PRECH_RLY_cmd_isActive) << 4;
 159              		.loc 1 204 3 is_stmt 1 view .LVU45
 160              		.loc 1 204 57 is_stmt 0 view .LVU46
 161 0018 03F01001 		and	r1, r3, #16
 162              		.loc 1 204 14 view .LVU47
 163 001c 1143     		orrs	r1, r1, r2
 164              	.LVL5:
 205:Core/Src/main.c ****   packedData |= (message->DCBUS_PRECH_RLY_isClosed) << 5;
 165              		.loc 1 205 3 is_stmt 1 view .LVU48
 166              		.loc 1 205 53 is_stmt 0 view .LVU49
 167 001e 03F02002 		and	r2, r3, #32
 168              		.loc 1 205 14 view .LVU50
 169 0022 1143     		orrs	r1, r1, r2
 170              	.LVL6:
 206:Core/Src/main.c ****   packedData |= (message->AMS_errIsActive) << 6;
 171              		.loc 1 206 3 is_stmt 1 view .LVU51
 172              		.loc 1 206 44 is_stmt 0 view .LVU52
 173 0024 03F04002 		and	r2, r3, #64
 174              		.loc 1 206 14 view .LVU53
 175 0028 0A43     		orrs	r2, r2, r1
 176              	.LVL7:
 207:Core/Src/main.c ****   packedData |= (message->IMD_errIsActive) << 7;
 177              		.loc 1 207 3 is_stmt 1 view .LVU54
 178              		.loc 1 207 44 is_stmt 0 view .LVU55
 179 002a 03F08003 		and	r3, r3, #128
 180              		.loc 1 207 14 view .LVU56
 181 002e 1343     		orrs	r3, r3, r2
 182              	.LVL8:
 208:Core/Src/main.c ****   packedData |= (message->TSAL_green_isActive) << 8;
 183              		.loc 1 208 3 is_stmt 1 view .LVU57
 184              		.loc 1 208 25 is_stmt 0 view .LVU58
 185 0030 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 186              	.LVL9:
 187              		.loc 1 208 25 view .LVU59
 188 0032 00F00102 		and	r2, r0, #1
 189              		.loc 1 208 14 view .LVU60
 190 0036 43EA0223 		orr	r3, r3, r2, lsl #8
 191              	.LVL10:
 209:Core/Src/main.c ****   packedData |= (message->DCBUS_isOver60V) << 9;
 192              		.loc 1 209 3 is_stmt 1 view .LVU61
 193              		.loc 1 209 25 is_stmt 0 view .LVU62
ARM GAS  /tmp/ccMXfGQo.s 			page 8


 194 003a C0F34002 		ubfx	r2, r0, #1, #1
 195              		.loc 1 209 14 view .LVU63
 196 003e 43EA4223 		orr	r3, r3, r2, lsl #9
 197              	.LVL11:
 210:Core/Src/main.c ****   packedData |= (message->IMP_any_isActive) << 10;
 198              		.loc 1 210 3 is_stmt 1 view .LVU64
 199              		.loc 1 210 25 is_stmt 0 view .LVU65
 200 0042 C0F38002 		ubfx	r2, r0, #2, #1
 201              		.loc 1 210 14 view .LVU66
 202 0046 43EA8223 		orr	r3, r3, r2, lsl #10
 203              	.LVL12:
 211:Core/Src/main.c ****   packedData |= (message->IMP_HV_Relays_Signals_isActive) << 11;
 204              		.loc 1 211 3 is_stmt 1 view .LVU67
 205              		.loc 1 211 25 is_stmt 0 view .LVU68
 206 004a C0F3C002 		ubfx	r2, r0, #3, #1
 207              		.loc 1 211 14 view .LVU69
 208 004e 43EAC223 		orr	r3, r3, r2, lsl #11
 209              	.LVL13:
 212:Core/Src/main.c ****   packedData |= (message->IMP_AIRS_Signals_isActive) << 12;
 210              		.loc 1 212 3 is_stmt 1 view .LVU70
 211              		.loc 1 212 25 is_stmt 0 view .LVU71
 212 0052 C0F30012 		ubfx	r2, r0, #4, #1
 213              		.loc 1 212 14 view .LVU72
 214 0056 43EA0233 		orr	r3, r3, r2, lsl #12
 215              	.LVL14:
 213:Core/Src/main.c ****   packedData |= (message->AIR_POS_STG_mechStateSignal_isActive) << 13;
 216              		.loc 1 213 3 is_stmt 1 view .LVU73
 217              		.loc 1 213 25 is_stmt 0 view .LVU74
 218 005a C0F34012 		ubfx	r2, r0, #5, #1
 219              		.loc 1 213 14 view .LVU75
 220 005e 43EA4233 		orr	r3, r3, r2, lsl #13
 221              	.LVL15:
 214:Core/Src/main.c ****   packedData |= (message->AIR_NEG_STG_mechStateSignal_isActive) << 14;
 222              		.loc 1 214 3 is_stmt 1 view .LVU76
 223              		.loc 1 214 25 is_stmt 0 view .LVU77
 224 0062 C0F38010 		ubfx	r0, r0, #6, #1
 225              	.LVL16:
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****   return packedData;
 226              		.loc 1 216 3 is_stmt 1 view .LVU78
 217:Core/Src/main.c **** }
 227              		.loc 1 217 1 is_stmt 0 view .LVU79
 228 0066 43EA8030 		orr	r0, r3, r0, lsl #14
 229              	.LVL17:
 230              		.loc 1 217 1 view .LVU80
 231 006a 7047     		bx	lr
 232              		.cfi_endproc
 233              	.LFE137:
 235              		.section	.rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4,"aMS",%progbits,1
 236              		.align	2
 237              	.LC0:
 238 0000 52656365 		.ascii	"Received: 0x%08lX\015\012\000"
 238      69766564 
 238      3A203078 
 238      2530386C 
 238      580D0A00 
 239              		.section	.text.HAL_CAN_RxFifo0MsgPendingCallback,"ax",%progbits
ARM GAS  /tmp/ccMXfGQo.s 			page 9


 240              		.align	1
 241              		.global	HAL_CAN_RxFifo0MsgPendingCallback
 242              		.syntax unified
 243              		.thumb
 244              		.thumb_func
 245              		.fpu fpv4-sp-d16
 247              	HAL_CAN_RxFifo0MsgPendingCallback:
 248              	.LVL18:
 249              	.LFB139:
 218:Core/Src/main.c **** 
 219:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 220:Core/Src/main.c ****   if(htim->Instance==TIM2){
 221:Core/Src/main.c ****     uint32_t packedData=PackCANMessage(&canMessage);//we packed the canMessage
 222:Core/Src/main.c **** 
 223:Core/Src/main.c ****     uint8_t dataPerByte[4]; //contains 4 bytes of 8 bits each
 224:Core/Src/main.c ****     dataPerByte[0] = (uint8_t)(packedData & 0xFF);//LSB because little-endian
 225:Core/Src/main.c ****     dataPerByte[1] = (uint8_t)((packedData >> 8) & 0xFF);
 226:Core/Src/main.c ****     dataPerByte[2] = (uint8_t)((packedData >> 16) & 0xFF);
 227:Core/Src/main.c ****     dataPerByte[3] = (uint8_t)((packedData >> 24) & 0xFF); //MSB 
 228:Core/Src/main.c ****     //dataPerByte=0x00000100
 229:Core/Src/main.c **** 
 230:Core/Src/main.c ****     uint32_t TxMailbox;
 231:Core/Src/main.c ****     CAN_TxHeaderTypeDef TxHeader;
 232:Core/Src/main.c ****     TxHeader.DLC=4;//size in bytes
 233:Core/Src/main.c ****     TxHeader.IDE=CAN_ID_STD;
 234:Core/Src/main.c ****     TxHeader.RTR=CAN_RTR_DATA;
 235:Core/Src/main.c ****     TxHeader.StdId=0x4; //msg ID
 236:Core/Src/main.c **** 
 237:Core/Src/main.c ****     if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, dataPerByte, &TxMailbox) != HAL_OK) {
 238:Core/Src/main.c ****       
 239:Core/Src/main.c ****       Error_Handler();
 240:Core/Src/main.c ****     }
 241:Core/Src/main.c ****   }
 242:Core/Src/main.c **** }
 243:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 250              		.loc 1 243 65 is_stmt 1 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 88
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		.loc 1 243 65 is_stmt 0 view .LVU82
 255 0000 00B5     		push	{lr}
 256              		.cfi_def_cfa_offset 4
 257              		.cfi_offset 14, -4
 258 0002 97B0     		sub	sp, sp, #92
 259              		.cfi_def_cfa_offset 96
 244:Core/Src/main.c ****     CAN_RxHeaderTypeDef RxHeader;
 260              		.loc 1 244 5 is_stmt 1 view .LVU83
 245:Core/Src/main.c ****     uint8_t receivedData[4]; // Buffer to store received data (4 bytes)
 261              		.loc 1 245 5 view .LVU84
 246:Core/Src/main.c **** 
 247:Core/Src/main.c ****     // Read the received message
 248:Core/Src/main.c ****     if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, receivedData) == HAL_OK) {
 262              		.loc 1 248 5 view .LVU85
 263              		.loc 1 248 9 is_stmt 0 view .LVU86
 264 0004 0EAB     		add	r3, sp, #56
 265 0006 0FAA     		add	r2, sp, #60
 266 0008 0021     		movs	r1, #0
ARM GAS  /tmp/ccMXfGQo.s 			page 10


 267 000a FFF7FEFF 		bl	HAL_CAN_GetRxMessage
 268              	.LVL19:
 269              		.loc 1 248 8 view .LVU87
 270 000e 10B9     		cbnz	r0, .L5
 249:Core/Src/main.c ****         // Check if the received message ID matches what you sent
 250:Core/Src/main.c ****         if (RxHeader.StdId == 0x4 && RxHeader.DLC == 4) {
 271              		.loc 1 250 9 is_stmt 1 view .LVU88
 272              		.loc 1 250 21 is_stmt 0 view .LVU89
 273 0010 0F9B     		ldr	r3, [sp, #60]
 274              		.loc 1 250 12 view .LVU90
 275 0012 042B     		cmp	r3, #4
 276 0014 02D0     		beq	.L8
 277              	.L5:
 251:Core/Src/main.c ****             // Extract the data if needed
 252:Core/Src/main.c ****             uint32_t receivedPackedData = (receivedData[3] << 24) | (receivedData[2] << 16) | (rece
 253:Core/Src/main.c **** 
 254:Core/Src/main.c ****             // Print or process the receivedPackedData
 255:Core/Src/main.c ****             char msg[50];
 256:Core/Src/main.c ****             sprintf(msg, "Received: 0x%08lX\r\n", receivedPackedData);
 257:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 258:Core/Src/main.c ****         }
 259:Core/Src/main.c ****     }
 260:Core/Src/main.c **** }
 278              		.loc 1 260 1 view .LVU91
 279 0016 17B0     		add	sp, sp, #92
 280              		.cfi_remember_state
 281              		.cfi_def_cfa_offset 4
 282              		@ sp needed
 283 0018 5DF804FB 		ldr	pc, [sp], #4
 284              	.L8:
 285              		.cfi_restore_state
 250:Core/Src/main.c ****             // Extract the data if needed
 286              		.loc 1 250 46 discriminator 1 view .LVU92
 287 001c 139B     		ldr	r3, [sp, #76]
 250:Core/Src/main.c ****             // Extract the data if needed
 288              		.loc 1 250 35 discriminator 1 view .LVU93
 289 001e 042B     		cmp	r3, #4
 290 0020 F9D1     		bne	.L5
 291              	.LBB4:
 252:Core/Src/main.c **** 
 292              		.loc 1 252 13 is_stmt 1 view .LVU94
 252:Core/Src/main.c **** 
 293              		.loc 1 252 56 is_stmt 0 view .LVU95
 294 0022 9DF83B20 		ldrb	r2, [sp, #59]	@ zero_extendqisi2
 252:Core/Src/main.c **** 
 295              		.loc 1 252 82 view .LVU96
 296 0026 9DF83A30 		ldrb	r3, [sp, #58]	@ zero_extendqisi2
 252:Core/Src/main.c **** 
 297              		.loc 1 252 86 view .LVU97
 298 002a 1B04     		lsls	r3, r3, #16
 252:Core/Src/main.c **** 
 299              		.loc 1 252 67 view .LVU98
 300 002c 43EA0263 		orr	r3, r3, r2, lsl #24
 252:Core/Src/main.c **** 
 301              		.loc 1 252 108 view .LVU99
 302 0030 9DF83920 		ldrb	r2, [sp, #57]	@ zero_extendqisi2
 252:Core/Src/main.c **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 11


 303              		.loc 1 252 93 view .LVU100
 304 0034 43EA0223 		orr	r3, r3, r2, lsl #8
 252:Core/Src/main.c **** 
 305              		.loc 1 252 132 view .LVU101
 306 0038 9DF83820 		ldrb	r2, [sp, #56]	@ zero_extendqisi2
 307              	.LVL20:
 255:Core/Src/main.c ****             sprintf(msg, "Received: 0x%08lX\r\n", receivedPackedData);
 308              		.loc 1 255 13 is_stmt 1 view .LVU102
 256:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 309              		.loc 1 256 13 view .LVU103
 310 003c 1A43     		orrs	r2, r2, r3
 311              	.LVL21:
 256:Core/Src/main.c ****             HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 312              		.loc 1 256 13 is_stmt 0 view .LVU104
 313 003e 0749     		ldr	r1, .L9
 314 0040 01A8     		add	r0, sp, #4
 315 0042 FFF7FEFF 		bl	sprintf
 316              	.LVL22:
 257:Core/Src/main.c ****         }
 317              		.loc 1 257 13 is_stmt 1 view .LVU105
 257:Core/Src/main.c ****         }
 318              		.loc 1 257 56 is_stmt 0 view .LVU106
 319 0046 01A8     		add	r0, sp, #4
 320 0048 FFF7FEFF 		bl	strlen
 321              	.LVL23:
 257:Core/Src/main.c ****         }
 322              		.loc 1 257 13 view .LVU107
 323 004c 4FF0FF33 		mov	r3, #-1
 324 0050 82B2     		uxth	r2, r0
 325 0052 01A9     		add	r1, sp, #4
 326 0054 0248     		ldr	r0, .L9+4
 327 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 328              	.LVL24:
 329              	.LBE4:
 330              		.loc 1 260 1 view .LVU108
 331 005a DCE7     		b	.L5
 332              	.L10:
 333              		.align	2
 334              	.L9:
 335 005c 00000000 		.word	.LC0
 336 0060 00000000 		.word	huart2
 337              		.cfi_endproc
 338              	.LFE139:
 340              		.section	.rodata.CAN_ErrorHandler.str1.4,"aMS",%progbits,1
 341              		.align	2
 342              	.LC1:
 343 0000 50726F74 		.ascii	"Protocol Error Warning\000"
 343      6F636F6C 
 343      20457272 
 343      6F722057 
 343      61726E69 
 344 0017 00       		.align	2
 345              	.LC2:
 346 0018 0D0A00   		.ascii	"\015\012\000"
 347 001b 00       		.align	2
 348              	.LC3:
 349 001c 4572726F 		.ascii	"Error Passive\000"
ARM GAS  /tmp/ccMXfGQo.s 			page 12


 349      72205061 
 349      73736976 
 349      6500
 350 002a 0000     		.align	2
 351              	.LC4:
 352 002c 4275732D 		.ascii	"Bus-off Error\000"
 352      6F666620 
 352      4572726F 
 352      7200
 353 003a 0000     		.align	2
 354              	.LC5:
 355 003c 53747566 		.ascii	"Stuff Error\000"
 355      66204572 
 355      726F7200 
 356              		.align	2
 357              	.LC6:
 358 0048 466F726D 		.ascii	"Form Error\000"
 358      20457272 
 358      6F7200
 359 0053 00       		.align	2
 360              	.LC7:
 361 0054 41434B20 		.ascii	"ACK Error\000"
 361      4572726F 
 361      7200
 362 005e 0000     		.align	2
 363              	.LC8:
 364 0060 42697420 		.ascii	"Bit Recessive Error\000"
 364      52656365 
 364      73736976 
 364      65204572 
 364      726F7200 
 365              		.align	2
 366              	.LC9:
 367 0074 42697420 		.ascii	"Bit Dominant Error\000"
 367      446F6D69 
 367      6E616E74 
 367      20457272 
 367      6F7200
 368 0087 00       		.align	2
 369              	.LC10:
 370 0088 43524320 		.ascii	"CRC Error\000"
 370      4572726F 
 370      7200
 371 0092 0000     		.align	2
 372              	.LC11:
 373 0094 4649464F 		.ascii	"FIFO0 Overrun\000"
 373      30204F76 
 373      65727275 
 373      6E00
 374 00a2 0000     		.align	2
 375              	.LC12:
 376 00a4 4649464F 		.ascii	"FIFO1 Overrun\000"
 376      31204F76 
 376      65727275 
 376      6E00
 377 00b2 0000     		.align	2
 378              	.LC13:
ARM GAS  /tmp/ccMXfGQo.s 			page 13


 379 00b4 4D61696C 		.ascii	"Mailbox 0 TX failure (arbitration lost)\000"
 379      626F7820 
 379      30205458 
 379      20666169 
 379      6C757265 
 380              		.align	2
 381              	.LC14:
 382 00dc 4D61696C 		.ascii	"Mailbox 0 TX failure (tx error)\000"
 382      626F7820 
 382      30205458 
 382      20666169 
 382      6C757265 
 383              		.align	2
 384              	.LC15:
 385 00fc 4D61696C 		.ascii	"Mailbox 1 TX failure (arbitration lost)\000"
 385      626F7820 
 385      31205458 
 385      20666169 
 385      6C757265 
 386              		.align	2
 387              	.LC16:
 388 0124 4D61696C 		.ascii	"Mailbox 1 TX failure (tx error)\000"
 388      626F7820 
 388      31205458 
 388      20666169 
 388      6C757265 
 389              		.align	2
 390              	.LC17:
 391 0144 4D61696C 		.ascii	"Mailbox 2 TX failure (arbitration lost)\000"
 391      626F7820 
 391      32205458 
 391      20666169 
 391      6C757265 
 392              		.align	2
 393              	.LC18:
 394 016c 4D61696C 		.ascii	"Mailbox 2 TX failure (tx error)\000"
 394      626F7820 
 394      32205458 
 394      20666169 
 394      6C757265 
 395              		.align	2
 396              	.LC19:
 397 018c 54696D65 		.ascii	"Timeout Error\000"
 397      6F757420 
 397      4572726F 
 397      7200
 398 019a 0000     		.align	2
 399              	.LC20:
 400 019c 50657269 		.ascii	"Peripheral not initialized\000"
 400      70686572 
 400      616C206E 
 400      6F742069 
 400      6E697469 
 401 01b7 00       		.align	2
 402              	.LC21:
 403 01b8 50657269 		.ascii	"Peripheral not ready\000"
 403      70686572 
ARM GAS  /tmp/ccMXfGQo.s 			page 14


 403      616C206E 
 403      6F742072 
 403      65616479 
 404 01cd 000000   		.align	2
 405              	.LC22:
 406 01d0 50657269 		.ascii	"Peripheral not strated\000"
 406      70686572 
 406      616C206E 
 406      6F742073 
 406      74726174 
 407 01e7 00       		.align	2
 408              	.LC23:
 409 01e8 50617261 		.ascii	"Parameter Error\000"
 409      6D657465 
 409      72204572 
 409      726F7200 
 410              		.align	2
 411              	.LC24:
 412 01f8 72656320 		.ascii	"rec %u, tec %u\000"
 412      25752C20 
 412      74656320 
 412      257500
 413              		.section	.text.CAN_ErrorHandler,"ax",%progbits
 414              		.align	1
 415              		.global	CAN_ErrorHandler
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 419              		.fpu fpv4-sp-d16
 421              	CAN_ErrorHandler:
 422              	.LVL25:
 423              	.LFB140:
 261:Core/Src/main.c **** 
 262:Core/Src/main.c **** void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *);
 263:Core/Src/main.c **** void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *);
 264:Core/Src/main.c **** void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *);
 265:Core/Src/main.c **** void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *);
 266:Core/Src/main.c **** void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *);
 267:Core/Src/main.c **** void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *);
 268:Core/Src/main.c **** 
 269:Core/Src/main.c **** void CAN_ErrorHandler(CAN_HandleTypeDef *hcan) {
 424              		.loc 1 269 48 is_stmt 1 view -0
 425              		.cfi_startproc
 426              		@ args = 0, pretend = 0, frame = 24
 427              		@ frame_needed = 0, uses_anonymous_args = 0
 428              		.loc 1 269 48 is_stmt 0 view .LVU110
 429 0000 70B5     		push	{r4, r5, r6, lr}
 430              		.cfi_def_cfa_offset 16
 431              		.cfi_offset 4, -16
 432              		.cfi_offset 5, -12
 433              		.cfi_offset 6, -8
 434              		.cfi_offset 14, -4
 435 0002 86B0     		sub	sp, sp, #24
 436              		.cfi_def_cfa_offset 40
 437 0004 0546     		mov	r5, r0
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****     char buf[20];
ARM GAS  /tmp/ccMXfGQo.s 			page 15


 438              		.loc 1 271 5 is_stmt 1 view .LVU111
 272:Core/Src/main.c ****     uint32_t error = HAL_CAN_GetError(hcan);
 439              		.loc 1 272 5 view .LVU112
 440              		.loc 1 272 22 is_stmt 0 view .LVU113
 441 0006 FFF7FEFF 		bl	HAL_CAN_GetError
 442              	.LVL26:
 443              		.loc 1 272 22 view .LVU114
 444 000a 0446     		mov	r4, r0
 445              	.LVL27:
 273:Core/Src/main.c **** 
 274:Core/Src/main.c ****     #define tmp_printf(X)                                           \
 275:Core/Src/main.c ****     do {                                                                   \
 276:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)(X), strlen(X), HAL_MAX_DELAY); \
 277:Core/Src/main.c ****         HAL_UART_Transmit(&huart2, (uint8_t *)("\r\n"), strlen("\r\n"), HAL_MAX_DELAY); \
 278:Core/Src/main.c ****     } while (0)
 279:Core/Src/main.c ****  
 280:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EWG)
 446              		.loc 1 280 5 is_stmt 1 view .LVU115
 447              		.loc 1 280 8 is_stmt 0 view .LVU116
 448 000c 10F0010F 		tst	r0, #1
 449 0010 72D1     		bne	.L35
 450              	.LVL28:
 451              	.L12:
 281:Core/Src/main.c ****         tmp_printf("Protocol Error Warning");
 452              		.loc 1 281 9 is_stmt 1 discriminator 1 view .LVU117
 282:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 453              		.loc 1 282 5 discriminator 1 view .LVU118
 454              		.loc 1 282 8 is_stmt 0 discriminator 1 view .LVU119
 455 0012 14F0020F 		tst	r4, #2
 456 0016 7FD1     		bne	.L36
 457              	.L13:
 283:Core/Src/main.c ****         tmp_printf("Error Passive");
 458              		.loc 1 283 9 is_stmt 1 discriminator 1 view .LVU120
 284:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BOF)
 459              		.loc 1 284 5 discriminator 1 view .LVU121
 460              		.loc 1 284 8 is_stmt 0 discriminator 1 view .LVU122
 461 0018 14F0040F 		tst	r4, #4
 462 001c 40F08C80 		bne	.L37
 463              	.L14:
 285:Core/Src/main.c ****         tmp_printf("Bus-off Error");
 464              		.loc 1 285 9 is_stmt 1 discriminator 1 view .LVU123
 286:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_STF)
 465              		.loc 1 286 5 discriminator 1 view .LVU124
 466              		.loc 1 286 8 is_stmt 0 discriminator 1 view .LVU125
 467 0020 14F0080F 		tst	r4, #8
 468 0024 40F09880 		bne	.L38
 469              	.L15:
 287:Core/Src/main.c ****         tmp_printf("Stuff Error");
 470              		.loc 1 287 9 is_stmt 1 discriminator 1 view .LVU126
 288:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_FOR)
 471              		.loc 1 288 5 discriminator 1 view .LVU127
 472              		.loc 1 288 8 is_stmt 0 discriminator 1 view .LVU128
 473 0028 14F0100F 		tst	r4, #16
 474 002c 40F0A480 		bne	.L39
 475              	.L16:
 289:Core/Src/main.c ****         tmp_printf("Form Error");
 476              		.loc 1 289 9 is_stmt 1 discriminator 1 view .LVU129
ARM GAS  /tmp/ccMXfGQo.s 			page 16


 290:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_ACK)
 477              		.loc 1 290 5 discriminator 1 view .LVU130
 478              		.loc 1 290 8 is_stmt 0 discriminator 1 view .LVU131
 479 0030 14F0200F 		tst	r4, #32
 480 0034 40F0B080 		bne	.L40
 481              	.L17:
 291:Core/Src/main.c ****         tmp_printf("ACK Error");
 482              		.loc 1 291 9 is_stmt 1 discriminator 1 view .LVU132
 292:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BR)
 483              		.loc 1 292 5 discriminator 1 view .LVU133
 484              		.loc 1 292 8 is_stmt 0 discriminator 1 view .LVU134
 485 0038 14F0400F 		tst	r4, #64
 486 003c 40F0BC80 		bne	.L41
 487              	.L18:
 293:Core/Src/main.c ****         tmp_printf("Bit Recessive Error");
 488              		.loc 1 293 9 is_stmt 1 discriminator 1 view .LVU135
 294:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BD)
 489              		.loc 1 294 5 discriminator 1 view .LVU136
 490              		.loc 1 294 8 is_stmt 0 discriminator 1 view .LVU137
 491 0040 14F0800F 		tst	r4, #128
 492 0044 40F0C880 		bne	.L42
 493              	.L19:
 295:Core/Src/main.c ****         tmp_printf("Bit Dominant Error");
 494              		.loc 1 295 9 is_stmt 1 discriminator 1 view .LVU138
 296:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_CRC)
 495              		.loc 1 296 5 discriminator 1 view .LVU139
 496              		.loc 1 296 8 is_stmt 0 discriminator 1 view .LVU140
 497 0048 14F4807F 		tst	r4, #256
 498 004c 40F0D480 		bne	.L43
 499              	.L20:
 297:Core/Src/main.c ****         tmp_printf("CRC Error");
 500              		.loc 1 297 9 is_stmt 1 discriminator 1 view .LVU141
 298:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV0)
 501              		.loc 1 298 5 discriminator 1 view .LVU142
 502              		.loc 1 298 8 is_stmt 0 discriminator 1 view .LVU143
 503 0050 14F4007F 		tst	r4, #512
 504 0054 40F0E080 		bne	.L44
 505              	.L21:
 299:Core/Src/main.c ****         tmp_printf("FIFO0 Overrun");
 506              		.loc 1 299 9 is_stmt 1 discriminator 1 view .LVU144
 300:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV1)
 507              		.loc 1 300 5 discriminator 1 view .LVU145
 508              		.loc 1 300 8 is_stmt 0 discriminator 1 view .LVU146
 509 0058 14F4806F 		tst	r4, #1024
 510 005c 40F0EC80 		bne	.L45
 511              	.L22:
 301:Core/Src/main.c ****         tmp_printf("FIFO1 Overrun");
 512              		.loc 1 301 9 is_stmt 1 discriminator 1 view .LVU147
 302:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST0)
 513              		.loc 1 302 5 discriminator 1 view .LVU148
 514              		.loc 1 302 8 is_stmt 0 discriminator 1 view .LVU149
 515 0060 14F4006F 		tst	r4, #2048
 516 0064 40F0F880 		bne	.L46
 517              	.L23:
 303:Core/Src/main.c ****         tmp_printf("Mailbox 0 TX failure (arbitration lost)");
 518              		.loc 1 303 9 is_stmt 1 discriminator 1 view .LVU150
 304:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR0)
ARM GAS  /tmp/ccMXfGQo.s 			page 17


 519              		.loc 1 304 5 discriminator 1 view .LVU151
 520              		.loc 1 304 8 is_stmt 0 discriminator 1 view .LVU152
 521 0068 14F4805F 		tst	r4, #4096
 522 006c 40F00481 		bne	.L47
 523              	.L24:
 305:Core/Src/main.c ****         tmp_printf("Mailbox 0 TX failure (tx error)");
 524              		.loc 1 305 9 is_stmt 1 discriminator 1 view .LVU153
 306:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST1)
 525              		.loc 1 306 5 discriminator 1 view .LVU154
 526              		.loc 1 306 8 is_stmt 0 discriminator 1 view .LVU155
 527 0070 14F4005F 		tst	r4, #8192
 528 0074 40F01081 		bne	.L48
 529              	.L25:
 307:Core/Src/main.c ****         tmp_printf("Mailbox 1 TX failure (arbitration lost)");
 530              		.loc 1 307 9 is_stmt 1 discriminator 1 view .LVU156
 308:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR1)
 531              		.loc 1 308 5 discriminator 1 view .LVU157
 532              		.loc 1 308 8 is_stmt 0 discriminator 1 view .LVU158
 533 0078 14F4804F 		tst	r4, #16384
 534 007c 40F01C81 		bne	.L49
 535              	.L26:
 309:Core/Src/main.c ****         tmp_printf("Mailbox 1 TX failure (tx error)");
 536              		.loc 1 309 9 is_stmt 1 discriminator 1 view .LVU159
 310:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST2)
 537              		.loc 1 310 5 discriminator 1 view .LVU160
 538              		.loc 1 310 8 is_stmt 0 discriminator 1 view .LVU161
 539 0080 14F4004F 		tst	r4, #32768
 540 0084 40F02881 		bne	.L50
 541              	.L27:
 311:Core/Src/main.c ****         tmp_printf("Mailbox 2 TX failure (arbitration lost)");
 542              		.loc 1 311 9 is_stmt 1 discriminator 1 view .LVU162
 312:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR2)
 543              		.loc 1 312 5 discriminator 1 view .LVU163
 544              		.loc 1 312 8 is_stmt 0 discriminator 1 view .LVU164
 545 0088 14F4803F 		tst	r4, #65536
 546 008c 40F03481 		bne	.L51
 547              	.L28:
 313:Core/Src/main.c ****         tmp_printf("Mailbox 2 TX failure (tx error)");
 548              		.loc 1 313 9 is_stmt 1 discriminator 1 view .LVU165
 314:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TIMEOUT)
 549              		.loc 1 314 5 discriminator 1 view .LVU166
 550              		.loc 1 314 8 is_stmt 0 discriminator 1 view .LVU167
 551 0090 14F4003F 		tst	r4, #131072
 552 0094 40F04081 		bne	.L52
 553              	.L29:
 315:Core/Src/main.c ****         tmp_printf("Timeout Error");
 554              		.loc 1 315 9 is_stmt 1 discriminator 1 view .LVU168
 316:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_INITIALIZED)
 555              		.loc 1 316 5 discriminator 1 view .LVU169
 556              		.loc 1 316 8 is_stmt 0 discriminator 1 view .LVU170
 557 0098 14F4802F 		tst	r4, #262144
 558 009c 40F04C81 		bne	.L53
 559              	.L30:
 317:Core/Src/main.c ****         tmp_printf("Peripheral not initialized");
 560              		.loc 1 317 9 is_stmt 1 discriminator 1 view .LVU171
 318:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_READY)
 561              		.loc 1 318 5 discriminator 1 view .LVU172
ARM GAS  /tmp/ccMXfGQo.s 			page 18


 562              		.loc 1 318 8 is_stmt 0 discriminator 1 view .LVU173
 563 00a0 14F4002F 		tst	r4, #524288
 564 00a4 40F05881 		bne	.L54
 565              	.L31:
 319:Core/Src/main.c ****         tmp_printf("Peripheral not ready");
 566              		.loc 1 319 9 is_stmt 1 discriminator 1 view .LVU174
 320:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_STARTED)
 567              		.loc 1 320 5 discriminator 1 view .LVU175
 568              		.loc 1 320 8 is_stmt 0 discriminator 1 view .LVU176
 569 00a8 14F4801F 		tst	r4, #1048576
 570 00ac 40F06481 		bne	.L55
 571              	.L32:
 321:Core/Src/main.c ****         tmp_printf("Peripheral not strated");
 572              		.loc 1 321 9 is_stmt 1 discriminator 1 view .LVU177
 322:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_PARAM)
 573              		.loc 1 322 5 discriminator 1 view .LVU178
 574              		.loc 1 322 8 is_stmt 0 discriminator 1 view .LVU179
 575 00b0 14F4001F 		tst	r4, #2097152
 576 00b4 40F07081 		bne	.L56
 577              	.LVL29:
 578              	.L33:
 323:Core/Src/main.c ****         tmp_printf("Parameter Error");
 579              		.loc 1 323 9 is_stmt 1 discriminator 1 view .LVU180
 324:Core/Src/main.c ****      
 325:Core/Src/main.c ****     uint16_t rec = (uint16_t)((hcan->Instance->ESR && CAN_ESR_REC_Msk) >> CAN_ESR_REC_Pos);
 580              		.loc 1 325 5 discriminator 1 view .LVU181
 581              		.loc 1 325 36 is_stmt 0 discriminator 1 view .LVU182
 582 00b8 2B68     		ldr	r3, [r5]
 583              		.loc 1 325 46 discriminator 1 view .LVU183
 584 00ba 9A69     		ldr	r2, [r3, #24]
 585              	.LVL30:
 326:Core/Src/main.c ****     uint16_t tec = (uint16_t)((hcan->Instance->ESR && CAN_ESR_TEC_Msk) >> CAN_ESR_TEC_Pos);
 586              		.loc 1 326 5 is_stmt 1 discriminator 1 view .LVU184
 587              		.loc 1 326 46 is_stmt 0 discriminator 1 view .LVU185
 588 00bc 9B69     		ldr	r3, [r3, #24]
 589              	.LVL31:
 327:Core/Src/main.c **** 
 328:Core/Src/main.c ****     sprintf(buf,"rec %u, tec %u",rec,tec);
 590              		.loc 1 328 5 is_stmt 1 discriminator 1 view .LVU186
 591 00be 0023     		movs	r3, #0
 592 00c0 1A46     		mov	r2, r3
 593 00c2 BD49     		ldr	r1, .L57
 594 00c4 01A8     		add	r0, sp, #4
 595 00c6 FFF7FEFF 		bl	sprintf
 596              	.LVL32:
 329:Core/Src/main.c ****     tmp_printf(buf);
 597              		.loc 1 329 5 discriminator 1 view .LVU187
 598              	.LBB5:
 599              		.loc 1 329 5 discriminator 1 view .LVU188
 600 00ca 01A8     		add	r0, sp, #4
 601 00cc FFF7FEFF 		bl	strlen
 602              	.LVL33:
 603 00d0 BA4C     		ldr	r4, .L57+4
 604 00d2 4FF0FF33 		mov	r3, #-1
 605 00d6 82B2     		uxth	r2, r0
 606 00d8 01A9     		add	r1, sp, #4
 607 00da 2046     		mov	r0, r4
ARM GAS  /tmp/ccMXfGQo.s 			page 19


 608 00dc FFF7FEFF 		bl	HAL_UART_Transmit
 609              	.LVL34:
 610              		.loc 1 329 5 discriminator 1 view .LVU189
 611 00e0 4FF0FF33 		mov	r3, #-1
 612 00e4 0222     		movs	r2, #2
 613 00e6 B649     		ldr	r1, .L57+8
 614 00e8 2046     		mov	r0, r4
 615 00ea FFF7FEFF 		bl	HAL_UART_Transmit
 616              	.LVL35:
 617              	.LBE5:
 618              		.loc 1 329 5 discriminator 1 view .LVU190
 330:Core/Src/main.c **** 
 331:Core/Src/main.c ****     HAL_CAN_ResetError(hcan);
 619              		.loc 1 331 5 discriminator 1 view .LVU191
 620 00ee 2846     		mov	r0, r5
 621 00f0 FFF7FEFF 		bl	HAL_CAN_ResetError
 622              	.LVL36:
 332:Core/Src/main.c **** }
 623              		.loc 1 332 1 is_stmt 0 discriminator 1 view .LVU192
 624 00f4 06B0     		add	sp, sp, #24
 625              		.cfi_remember_state
 626              		.cfi_def_cfa_offset 16
 627              		@ sp needed
 628 00f6 70BD     		pop	{r4, r5, r6, pc}
 629              	.LVL37:
 630              	.L35:
 631              		.cfi_restore_state
 281:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 632              		.loc 1 281 9 is_stmt 1 view .LVU193
 633              	.LBB6:
 281:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 634              		.loc 1 281 9 view .LVU194
 635 00f8 B04E     		ldr	r6, .L57+4
 636 00fa 4FF0FF33 		mov	r3, #-1
 637 00fe 1622     		movs	r2, #22
 638 0100 B049     		ldr	r1, .L57+12
 639 0102 3046     		mov	r0, r6
 640              	.LVL38:
 281:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 641              		.loc 1 281 9 is_stmt 0 view .LVU195
 642 0104 FFF7FEFF 		bl	HAL_UART_Transmit
 643              	.LVL39:
 281:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 644              		.loc 1 281 9 is_stmt 1 view .LVU196
 645 0108 4FF0FF33 		mov	r3, #-1
 646 010c 0222     		movs	r2, #2
 647 010e AC49     		ldr	r1, .L57+8
 648 0110 3046     		mov	r0, r6
 649 0112 FFF7FEFF 		bl	HAL_UART_Transmit
 650              	.LVL40:
 651 0116 7CE7     		b	.L12
 652              	.L36:
 281:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_EPV)
 653              		.loc 1 281 9 is_stmt 0 view .LVU197
 654              	.LBE6:
 283:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BOF)
 655              		.loc 1 283 9 is_stmt 1 view .LVU198
ARM GAS  /tmp/ccMXfGQo.s 			page 20


 656              	.LBB7:
 283:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BOF)
 657              		.loc 1 283 9 view .LVU199
 658 0118 A84E     		ldr	r6, .L57+4
 659 011a 4FF0FF33 		mov	r3, #-1
 660 011e 0D22     		movs	r2, #13
 661 0120 A949     		ldr	r1, .L57+16
 662 0122 3046     		mov	r0, r6
 663 0124 FFF7FEFF 		bl	HAL_UART_Transmit
 664              	.LVL41:
 283:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BOF)
 665              		.loc 1 283 9 view .LVU200
 666 0128 4FF0FF33 		mov	r3, #-1
 667 012c 0222     		movs	r2, #2
 668 012e A449     		ldr	r1, .L57+8
 669 0130 3046     		mov	r0, r6
 670 0132 FFF7FEFF 		bl	HAL_UART_Transmit
 671              	.LVL42:
 672 0136 6FE7     		b	.L13
 673              	.L37:
 283:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BOF)
 674              		.loc 1 283 9 is_stmt 0 view .LVU201
 675              	.LBE7:
 285:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_STF)
 676              		.loc 1 285 9 is_stmt 1 view .LVU202
 677              	.LBB8:
 285:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_STF)
 678              		.loc 1 285 9 view .LVU203
 679 0138 A04E     		ldr	r6, .L57+4
 680 013a 4FF0FF33 		mov	r3, #-1
 681 013e 0D22     		movs	r2, #13
 682 0140 A249     		ldr	r1, .L57+20
 683 0142 3046     		mov	r0, r6
 684 0144 FFF7FEFF 		bl	HAL_UART_Transmit
 685              	.LVL43:
 285:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_STF)
 686              		.loc 1 285 9 view .LVU204
 687 0148 4FF0FF33 		mov	r3, #-1
 688 014c 0222     		movs	r2, #2
 689 014e 9C49     		ldr	r1, .L57+8
 690 0150 3046     		mov	r0, r6
 691 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 692              	.LVL44:
 693 0156 63E7     		b	.L14
 694              	.L38:
 285:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_STF)
 695              		.loc 1 285 9 is_stmt 0 view .LVU205
 696              	.LBE8:
 287:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_FOR)
 697              		.loc 1 287 9 is_stmt 1 view .LVU206
 698              	.LBB9:
 287:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_FOR)
 699              		.loc 1 287 9 view .LVU207
 700 0158 984E     		ldr	r6, .L57+4
 701 015a 4FF0FF33 		mov	r3, #-1
 702 015e 0B22     		movs	r2, #11
 703 0160 9B49     		ldr	r1, .L57+24
ARM GAS  /tmp/ccMXfGQo.s 			page 21


 704 0162 3046     		mov	r0, r6
 705 0164 FFF7FEFF 		bl	HAL_UART_Transmit
 706              	.LVL45:
 287:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_FOR)
 707              		.loc 1 287 9 view .LVU208
 708 0168 4FF0FF33 		mov	r3, #-1
 709 016c 0222     		movs	r2, #2
 710 016e 9449     		ldr	r1, .L57+8
 711 0170 3046     		mov	r0, r6
 712 0172 FFF7FEFF 		bl	HAL_UART_Transmit
 713              	.LVL46:
 714 0176 57E7     		b	.L15
 715              	.L39:
 287:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_FOR)
 716              		.loc 1 287 9 is_stmt 0 view .LVU209
 717              	.LBE9:
 289:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_ACK)
 718              		.loc 1 289 9 is_stmt 1 view .LVU210
 719              	.LBB10:
 289:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_ACK)
 720              		.loc 1 289 9 view .LVU211
 721 0178 904E     		ldr	r6, .L57+4
 722 017a 4FF0FF33 		mov	r3, #-1
 723 017e 0A22     		movs	r2, #10
 724 0180 9449     		ldr	r1, .L57+28
 725 0182 3046     		mov	r0, r6
 726 0184 FFF7FEFF 		bl	HAL_UART_Transmit
 727              	.LVL47:
 289:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_ACK)
 728              		.loc 1 289 9 view .LVU212
 729 0188 4FF0FF33 		mov	r3, #-1
 730 018c 0222     		movs	r2, #2
 731 018e 8C49     		ldr	r1, .L57+8
 732 0190 3046     		mov	r0, r6
 733 0192 FFF7FEFF 		bl	HAL_UART_Transmit
 734              	.LVL48:
 735 0196 4BE7     		b	.L16
 736              	.L40:
 289:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_ACK)
 737              		.loc 1 289 9 is_stmt 0 view .LVU213
 738              	.LBE10:
 291:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BR)
 739              		.loc 1 291 9 is_stmt 1 view .LVU214
 740              	.LBB11:
 291:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BR)
 741              		.loc 1 291 9 view .LVU215
 742 0198 884E     		ldr	r6, .L57+4
 743 019a 4FF0FF33 		mov	r3, #-1
 744 019e 0922     		movs	r2, #9
 745 01a0 8D49     		ldr	r1, .L57+32
 746 01a2 3046     		mov	r0, r6
 747 01a4 FFF7FEFF 		bl	HAL_UART_Transmit
 748              	.LVL49:
 291:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BR)
 749              		.loc 1 291 9 view .LVU216
 750 01a8 4FF0FF33 		mov	r3, #-1
 751 01ac 0222     		movs	r2, #2
ARM GAS  /tmp/ccMXfGQo.s 			page 22


 752 01ae 8449     		ldr	r1, .L57+8
 753 01b0 3046     		mov	r0, r6
 754 01b2 FFF7FEFF 		bl	HAL_UART_Transmit
 755              	.LVL50:
 756 01b6 3FE7     		b	.L17
 757              	.L41:
 291:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BR)
 758              		.loc 1 291 9 is_stmt 0 view .LVU217
 759              	.LBE11:
 293:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BD)
 760              		.loc 1 293 9 is_stmt 1 view .LVU218
 761              	.LBB12:
 293:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BD)
 762              		.loc 1 293 9 view .LVU219
 763 01b8 804E     		ldr	r6, .L57+4
 764 01ba 4FF0FF33 		mov	r3, #-1
 765 01be 1322     		movs	r2, #19
 766 01c0 8649     		ldr	r1, .L57+36
 767 01c2 3046     		mov	r0, r6
 768 01c4 FFF7FEFF 		bl	HAL_UART_Transmit
 769              	.LVL51:
 293:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BD)
 770              		.loc 1 293 9 view .LVU220
 771 01c8 4FF0FF33 		mov	r3, #-1
 772 01cc 0222     		movs	r2, #2
 773 01ce 7C49     		ldr	r1, .L57+8
 774 01d0 3046     		mov	r0, r6
 775 01d2 FFF7FEFF 		bl	HAL_UART_Transmit
 776              	.LVL52:
 777 01d6 33E7     		b	.L18
 778              	.L42:
 293:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_BD)
 779              		.loc 1 293 9 is_stmt 0 view .LVU221
 780              	.LBE12:
 295:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_CRC)
 781              		.loc 1 295 9 is_stmt 1 view .LVU222
 782              	.LBB13:
 295:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_CRC)
 783              		.loc 1 295 9 view .LVU223
 784 01d8 784E     		ldr	r6, .L57+4
 785 01da 4FF0FF33 		mov	r3, #-1
 786 01de 1222     		movs	r2, #18
 787 01e0 7F49     		ldr	r1, .L57+40
 788 01e2 3046     		mov	r0, r6
 789 01e4 FFF7FEFF 		bl	HAL_UART_Transmit
 790              	.LVL53:
 295:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_CRC)
 791              		.loc 1 295 9 view .LVU224
 792 01e8 4FF0FF33 		mov	r3, #-1
 793 01ec 0222     		movs	r2, #2
 794 01ee 7449     		ldr	r1, .L57+8
 795 01f0 3046     		mov	r0, r6
 796 01f2 FFF7FEFF 		bl	HAL_UART_Transmit
 797              	.LVL54:
 798 01f6 27E7     		b	.L19
 799              	.L43:
 295:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_CRC)
ARM GAS  /tmp/ccMXfGQo.s 			page 23


 800              		.loc 1 295 9 is_stmt 0 view .LVU225
 801              	.LBE13:
 297:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV0)
 802              		.loc 1 297 9 is_stmt 1 view .LVU226
 803              	.LBB14:
 297:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV0)
 804              		.loc 1 297 9 view .LVU227
 805 01f8 704E     		ldr	r6, .L57+4
 806 01fa 4FF0FF33 		mov	r3, #-1
 807 01fe 0922     		movs	r2, #9
 808 0200 7849     		ldr	r1, .L57+44
 809 0202 3046     		mov	r0, r6
 810 0204 FFF7FEFF 		bl	HAL_UART_Transmit
 811              	.LVL55:
 297:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV0)
 812              		.loc 1 297 9 view .LVU228
 813 0208 4FF0FF33 		mov	r3, #-1
 814 020c 0222     		movs	r2, #2
 815 020e 6C49     		ldr	r1, .L57+8
 816 0210 3046     		mov	r0, r6
 817 0212 FFF7FEFF 		bl	HAL_UART_Transmit
 818              	.LVL56:
 819 0216 1BE7     		b	.L20
 820              	.L44:
 297:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV0)
 821              		.loc 1 297 9 is_stmt 0 view .LVU229
 822              	.LBE14:
 299:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV1)
 823              		.loc 1 299 9 is_stmt 1 view .LVU230
 824              	.LBB15:
 299:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV1)
 825              		.loc 1 299 9 view .LVU231
 826 0218 684E     		ldr	r6, .L57+4
 827 021a 4FF0FF33 		mov	r3, #-1
 828 021e 0D22     		movs	r2, #13
 829 0220 7149     		ldr	r1, .L57+48
 830 0222 3046     		mov	r0, r6
 831 0224 FFF7FEFF 		bl	HAL_UART_Transmit
 832              	.LVL57:
 299:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV1)
 833              		.loc 1 299 9 view .LVU232
 834 0228 4FF0FF33 		mov	r3, #-1
 835 022c 0222     		movs	r2, #2
 836 022e 6449     		ldr	r1, .L57+8
 837 0230 3046     		mov	r0, r6
 838 0232 FFF7FEFF 		bl	HAL_UART_Transmit
 839              	.LVL58:
 840 0236 0FE7     		b	.L21
 841              	.L45:
 299:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_RX_FOV1)
 842              		.loc 1 299 9 is_stmt 0 view .LVU233
 843              	.LBE15:
 301:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST0)
 844              		.loc 1 301 9 is_stmt 1 view .LVU234
 845              	.LBB16:
 301:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST0)
 846              		.loc 1 301 9 view .LVU235
ARM GAS  /tmp/ccMXfGQo.s 			page 24


 847 0238 604E     		ldr	r6, .L57+4
 848 023a 4FF0FF33 		mov	r3, #-1
 849 023e 0D22     		movs	r2, #13
 850 0240 6A49     		ldr	r1, .L57+52
 851 0242 3046     		mov	r0, r6
 852 0244 FFF7FEFF 		bl	HAL_UART_Transmit
 853              	.LVL59:
 301:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST0)
 854              		.loc 1 301 9 view .LVU236
 855 0248 4FF0FF33 		mov	r3, #-1
 856 024c 0222     		movs	r2, #2
 857 024e 5C49     		ldr	r1, .L57+8
 858 0250 3046     		mov	r0, r6
 859 0252 FFF7FEFF 		bl	HAL_UART_Transmit
 860              	.LVL60:
 861 0256 03E7     		b	.L22
 862              	.L46:
 301:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST0)
 863              		.loc 1 301 9 is_stmt 0 view .LVU237
 864              	.LBE16:
 303:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR0)
 865              		.loc 1 303 9 is_stmt 1 view .LVU238
 866              	.LBB17:
 303:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR0)
 867              		.loc 1 303 9 view .LVU239
 868 0258 584E     		ldr	r6, .L57+4
 869 025a 4FF0FF33 		mov	r3, #-1
 870 025e 2722     		movs	r2, #39
 871 0260 6349     		ldr	r1, .L57+56
 872 0262 3046     		mov	r0, r6
 873 0264 FFF7FEFF 		bl	HAL_UART_Transmit
 874              	.LVL61:
 303:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR0)
 875              		.loc 1 303 9 view .LVU240
 876 0268 4FF0FF33 		mov	r3, #-1
 877 026c 0222     		movs	r2, #2
 878 026e 5449     		ldr	r1, .L57+8
 879 0270 3046     		mov	r0, r6
 880 0272 FFF7FEFF 		bl	HAL_UART_Transmit
 881              	.LVL62:
 882 0276 F7E6     		b	.L23
 883              	.L47:
 303:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR0)
 884              		.loc 1 303 9 is_stmt 0 view .LVU241
 885              	.LBE17:
 305:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST1)
 886              		.loc 1 305 9 is_stmt 1 view .LVU242
 887              	.LBB18:
 305:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST1)
 888              		.loc 1 305 9 view .LVU243
 889 0278 504E     		ldr	r6, .L57+4
 890 027a 4FF0FF33 		mov	r3, #-1
 891 027e 1F22     		movs	r2, #31
 892 0280 5C49     		ldr	r1, .L57+60
 893 0282 3046     		mov	r0, r6
 894 0284 FFF7FEFF 		bl	HAL_UART_Transmit
 895              	.LVL63:
ARM GAS  /tmp/ccMXfGQo.s 			page 25


 305:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST1)
 896              		.loc 1 305 9 view .LVU244
 897 0288 4FF0FF33 		mov	r3, #-1
 898 028c 0222     		movs	r2, #2
 899 028e 4C49     		ldr	r1, .L57+8
 900 0290 3046     		mov	r0, r6
 901 0292 FFF7FEFF 		bl	HAL_UART_Transmit
 902              	.LVL64:
 903 0296 EBE6     		b	.L24
 904              	.L48:
 305:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST1)
 905              		.loc 1 305 9 is_stmt 0 view .LVU245
 906              	.LBE18:
 307:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR1)
 907              		.loc 1 307 9 is_stmt 1 view .LVU246
 908              	.LBB19:
 307:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR1)
 909              		.loc 1 307 9 view .LVU247
 910 0298 484E     		ldr	r6, .L57+4
 911 029a 4FF0FF33 		mov	r3, #-1
 912 029e 2722     		movs	r2, #39
 913 02a0 5549     		ldr	r1, .L57+64
 914 02a2 3046     		mov	r0, r6
 915 02a4 FFF7FEFF 		bl	HAL_UART_Transmit
 916              	.LVL65:
 307:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR1)
 917              		.loc 1 307 9 view .LVU248
 918 02a8 4FF0FF33 		mov	r3, #-1
 919 02ac 0222     		movs	r2, #2
 920 02ae 4449     		ldr	r1, .L57+8
 921 02b0 3046     		mov	r0, r6
 922 02b2 FFF7FEFF 		bl	HAL_UART_Transmit
 923              	.LVL66:
 924 02b6 DFE6     		b	.L25
 925              	.L49:
 307:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR1)
 926              		.loc 1 307 9 is_stmt 0 view .LVU249
 927              	.LBE19:
 309:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST2)
 928              		.loc 1 309 9 is_stmt 1 view .LVU250
 929              	.LBB20:
 309:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST2)
 930              		.loc 1 309 9 view .LVU251
 931 02b8 404E     		ldr	r6, .L57+4
 932 02ba 4FF0FF33 		mov	r3, #-1
 933 02be 1F22     		movs	r2, #31
 934 02c0 4E49     		ldr	r1, .L57+68
 935 02c2 3046     		mov	r0, r6
 936 02c4 FFF7FEFF 		bl	HAL_UART_Transmit
 937              	.LVL67:
 309:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST2)
 938              		.loc 1 309 9 view .LVU252
 939 02c8 4FF0FF33 		mov	r3, #-1
 940 02cc 0222     		movs	r2, #2
 941 02ce 3C49     		ldr	r1, .L57+8
 942 02d0 3046     		mov	r0, r6
 943 02d2 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccMXfGQo.s 			page 26


 944              	.LVL68:
 945 02d6 D3E6     		b	.L26
 946              	.L50:
 309:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_ALST2)
 947              		.loc 1 309 9 is_stmt 0 view .LVU253
 948              	.LBE20:
 311:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR2)
 949              		.loc 1 311 9 is_stmt 1 view .LVU254
 950              	.LBB21:
 311:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR2)
 951              		.loc 1 311 9 view .LVU255
 952 02d8 384E     		ldr	r6, .L57+4
 953 02da 4FF0FF33 		mov	r3, #-1
 954 02de 2722     		movs	r2, #39
 955 02e0 4749     		ldr	r1, .L57+72
 956 02e2 3046     		mov	r0, r6
 957 02e4 FFF7FEFF 		bl	HAL_UART_Transmit
 958              	.LVL69:
 311:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR2)
 959              		.loc 1 311 9 view .LVU256
 960 02e8 4FF0FF33 		mov	r3, #-1
 961 02ec 0222     		movs	r2, #2
 962 02ee 3449     		ldr	r1, .L57+8
 963 02f0 3046     		mov	r0, r6
 964 02f2 FFF7FEFF 		bl	HAL_UART_Transmit
 965              	.LVL70:
 966 02f6 C7E6     		b	.L27
 967              	.L51:
 311:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TX_TERR2)
 968              		.loc 1 311 9 is_stmt 0 view .LVU257
 969              	.LBE21:
 313:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TIMEOUT)
 970              		.loc 1 313 9 is_stmt 1 view .LVU258
 971              	.LBB22:
 313:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TIMEOUT)
 972              		.loc 1 313 9 view .LVU259
 973 02f8 304E     		ldr	r6, .L57+4
 974 02fa 4FF0FF33 		mov	r3, #-1
 975 02fe 1F22     		movs	r2, #31
 976 0300 4049     		ldr	r1, .L57+76
 977 0302 3046     		mov	r0, r6
 978 0304 FFF7FEFF 		bl	HAL_UART_Transmit
 979              	.LVL71:
 313:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TIMEOUT)
 980              		.loc 1 313 9 view .LVU260
 981 0308 4FF0FF33 		mov	r3, #-1
 982 030c 0222     		movs	r2, #2
 983 030e 2C49     		ldr	r1, .L57+8
 984 0310 3046     		mov	r0, r6
 985 0312 FFF7FEFF 		bl	HAL_UART_Transmit
 986              	.LVL72:
 987 0316 BBE6     		b	.L28
 988              	.L52:
 313:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_TIMEOUT)
 989              		.loc 1 313 9 is_stmt 0 view .LVU261
 990              	.LBE22:
 315:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_INITIALIZED)
ARM GAS  /tmp/ccMXfGQo.s 			page 27


 991              		.loc 1 315 9 is_stmt 1 view .LVU262
 992              	.LBB23:
 315:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_INITIALIZED)
 993              		.loc 1 315 9 view .LVU263
 994 0318 284E     		ldr	r6, .L57+4
 995 031a 4FF0FF33 		mov	r3, #-1
 996 031e 0D22     		movs	r2, #13
 997 0320 3949     		ldr	r1, .L57+80
 998 0322 3046     		mov	r0, r6
 999 0324 FFF7FEFF 		bl	HAL_UART_Transmit
 1000              	.LVL73:
 315:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_INITIALIZED)
 1001              		.loc 1 315 9 view .LVU264
 1002 0328 4FF0FF33 		mov	r3, #-1
 1003 032c 0222     		movs	r2, #2
 1004 032e 2449     		ldr	r1, .L57+8
 1005 0330 3046     		mov	r0, r6
 1006 0332 FFF7FEFF 		bl	HAL_UART_Transmit
 1007              	.LVL74:
 1008 0336 AFE6     		b	.L29
 1009              	.L53:
 315:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_INITIALIZED)
 1010              		.loc 1 315 9 is_stmt 0 view .LVU265
 1011              	.LBE23:
 317:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_READY)
 1012              		.loc 1 317 9 is_stmt 1 view .LVU266
 1013              	.LBB24:
 317:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_READY)
 1014              		.loc 1 317 9 view .LVU267
 1015 0338 204E     		ldr	r6, .L57+4
 1016 033a 4FF0FF33 		mov	r3, #-1
 1017 033e 1A22     		movs	r2, #26
 1018 0340 3249     		ldr	r1, .L57+84
 1019 0342 3046     		mov	r0, r6
 1020 0344 FFF7FEFF 		bl	HAL_UART_Transmit
 1021              	.LVL75:
 317:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_READY)
 1022              		.loc 1 317 9 view .LVU268
 1023 0348 4FF0FF33 		mov	r3, #-1
 1024 034c 0222     		movs	r2, #2
 1025 034e 1C49     		ldr	r1, .L57+8
 1026 0350 3046     		mov	r0, r6
 1027 0352 FFF7FEFF 		bl	HAL_UART_Transmit
 1028              	.LVL76:
 1029 0356 A3E6     		b	.L30
 1030              	.L54:
 317:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_READY)
 1031              		.loc 1 317 9 is_stmt 0 view .LVU269
 1032              	.LBE24:
 319:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_STARTED)
 1033              		.loc 1 319 9 is_stmt 1 view .LVU270
 1034              	.LBB25:
 319:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_STARTED)
 1035              		.loc 1 319 9 view .LVU271
 1036 0358 184E     		ldr	r6, .L57+4
 1037 035a 4FF0FF33 		mov	r3, #-1
 1038 035e 1422     		movs	r2, #20
ARM GAS  /tmp/ccMXfGQo.s 			page 28


 1039 0360 2B49     		ldr	r1, .L57+88
 1040 0362 3046     		mov	r0, r6
 1041 0364 FFF7FEFF 		bl	HAL_UART_Transmit
 1042              	.LVL77:
 319:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_STARTED)
 1043              		.loc 1 319 9 view .LVU272
 1044 0368 4FF0FF33 		mov	r3, #-1
 1045 036c 0222     		movs	r2, #2
 1046 036e 1449     		ldr	r1, .L57+8
 1047 0370 3046     		mov	r0, r6
 1048 0372 FFF7FEFF 		bl	HAL_UART_Transmit
 1049              	.LVL78:
 1050 0376 97E6     		b	.L31
 1051              	.L55:
 319:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_NOT_STARTED)
 1052              		.loc 1 319 9 is_stmt 0 view .LVU273
 1053              	.LBE25:
 321:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_PARAM)
 1054              		.loc 1 321 9 is_stmt 1 view .LVU274
 1055              	.LBB26:
 321:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_PARAM)
 1056              		.loc 1 321 9 view .LVU275
 1057 0378 104E     		ldr	r6, .L57+4
 1058 037a 4FF0FF33 		mov	r3, #-1
 1059 037e 1622     		movs	r2, #22
 1060 0380 2449     		ldr	r1, .L57+92
 1061 0382 3046     		mov	r0, r6
 1062 0384 FFF7FEFF 		bl	HAL_UART_Transmit
 1063              	.LVL79:
 321:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_PARAM)
 1064              		.loc 1 321 9 view .LVU276
 1065 0388 4FF0FF33 		mov	r3, #-1
 1066 038c 0222     		movs	r2, #2
 1067 038e 0C49     		ldr	r1, .L57+8
 1068 0390 3046     		mov	r0, r6
 1069 0392 FFF7FEFF 		bl	HAL_UART_Transmit
 1070              	.LVL80:
 1071 0396 8BE6     		b	.L32
 1072              	.L56:
 321:Core/Src/main.c ****     if (error & HAL_CAN_ERROR_PARAM)
 1073              		.loc 1 321 9 is_stmt 0 view .LVU277
 1074              	.LBE26:
 323:Core/Src/main.c ****      
 1075              		.loc 1 323 9 is_stmt 1 view .LVU278
 1076              	.LBB27:
 323:Core/Src/main.c ****      
 1077              		.loc 1 323 9 view .LVU279
 1078 0398 084C     		ldr	r4, .L57+4
 1079              	.LVL81:
 323:Core/Src/main.c ****      
 1080              		.loc 1 323 9 is_stmt 0 view .LVU280
 1081 039a 4FF0FF33 		mov	r3, #-1
 1082 039e 0F22     		movs	r2, #15
 1083 03a0 1D49     		ldr	r1, .L57+96
 1084 03a2 2046     		mov	r0, r4
 1085 03a4 FFF7FEFF 		bl	HAL_UART_Transmit
 1086              	.LVL82:
ARM GAS  /tmp/ccMXfGQo.s 			page 29


 323:Core/Src/main.c ****      
 1087              		.loc 1 323 9 is_stmt 1 view .LVU281
 1088 03a8 4FF0FF33 		mov	r3, #-1
 1089 03ac 0222     		movs	r2, #2
 1090 03ae 0449     		ldr	r1, .L57+8
 1091 03b0 2046     		mov	r0, r4
 1092 03b2 FFF7FEFF 		bl	HAL_UART_Transmit
 1093              	.LVL83:
 1094 03b6 7FE6     		b	.L33
 1095              	.L58:
 1096              		.align	2
 1097              	.L57:
 1098 03b8 F8010000 		.word	.LC24
 1099 03bc 00000000 		.word	huart2
 1100 03c0 18000000 		.word	.LC2
 1101 03c4 00000000 		.word	.LC1
 1102 03c8 1C000000 		.word	.LC3
 1103 03cc 2C000000 		.word	.LC4
 1104 03d0 3C000000 		.word	.LC5
 1105 03d4 48000000 		.word	.LC6
 1106 03d8 54000000 		.word	.LC7
 1107 03dc 60000000 		.word	.LC8
 1108 03e0 74000000 		.word	.LC9
 1109 03e4 88000000 		.word	.LC10
 1110 03e8 94000000 		.word	.LC11
 1111 03ec A4000000 		.word	.LC12
 1112 03f0 B4000000 		.word	.LC13
 1113 03f4 DC000000 		.word	.LC14
 1114 03f8 FC000000 		.word	.LC15
 1115 03fc 24010000 		.word	.LC16
 1116 0400 44010000 		.word	.LC17
 1117 0404 6C010000 		.word	.LC18
 1118 0408 8C010000 		.word	.LC19
 1119 040c 9C010000 		.word	.LC20
 1120 0410 B8010000 		.word	.LC21
 1121 0414 D0010000 		.word	.LC22
 1122 0418 E8010000 		.word	.LC23
 1123              	.LBE27:
 1124              		.cfi_endproc
 1125              	.LFE140:
 1127              		.section	.text.HAL_CAN_ErrorCallback,"ax",%progbits
 1128              		.align	1
 1129              		.global	HAL_CAN_ErrorCallback
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu fpv4-sp-d16
 1135              	HAL_CAN_ErrorCallback:
 1136              	.LVL84:
 1137              	.LFB141:
 333:Core/Src/main.c **** 
 334:Core/Src/main.c **** void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 1138              		.loc 1 334 53 view -0
 1139              		.cfi_startproc
 1140              		@ args = 0, pretend = 0, frame = 0
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              		.loc 1 334 53 is_stmt 0 view .LVU283
ARM GAS  /tmp/ccMXfGQo.s 			page 30


 1143 0000 08B5     		push	{r3, lr}
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 3, -8
 1146              		.cfi_offset 14, -4
 335:Core/Src/main.c ****   if(hcan == &hcan1){
 1147              		.loc 1 335 3 is_stmt 1 view .LVU284
 1148              		.loc 1 335 5 is_stmt 0 view .LVU285
 1149 0002 034B     		ldr	r3, .L63
 1150 0004 9842     		cmp	r0, r3
 1151 0006 00D0     		beq	.L62
 1152              	.LVL85:
 1153              	.L59:
 336:Core/Src/main.c ****     CAN_ErrorHandler(hcan);
 337:Core/Src/main.c ****   }
 338:Core/Src/main.c **** }
 1154              		.loc 1 338 1 view .LVU286
 1155 0008 08BD     		pop	{r3, pc}
 1156              	.LVL86:
 1157              	.L62:
 336:Core/Src/main.c ****     CAN_ErrorHandler(hcan);
 1158              		.loc 1 336 5 is_stmt 1 view .LVU287
 1159 000a FFF7FEFF 		bl	CAN_ErrorHandler
 1160              	.LVL87:
 1161              		.loc 1 338 1 is_stmt 0 view .LVU288
 1162 000e FBE7     		b	.L59
 1163              	.L64:
 1164              		.align	2
 1165              	.L63:
 1166 0010 00000000 		.word	hcan1
 1167              		.cfi_endproc
 1168              	.LFE141:
 1170              		.section	.text.Error_Handler,"ax",%progbits
 1171              		.align	1
 1172              		.global	Error_Handler
 1173              		.syntax unified
 1174              		.thumb
 1175              		.thumb_func
 1176              		.fpu fpv4-sp-d16
 1178              	Error_Handler:
 1179              	.LFB142:
 339:Core/Src/main.c **** 
 340:Core/Src/main.c **** /* USER CODE END 4 */
 341:Core/Src/main.c **** 
 342:Core/Src/main.c **** /**
 343:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 344:Core/Src/main.c ****   * @retval None
 345:Core/Src/main.c ****   */
 346:Core/Src/main.c **** void Error_Handler(void)
 347:Core/Src/main.c **** {
 1180              		.loc 1 347 1 is_stmt 1 view -0
 1181              		.cfi_startproc
 1182              		@ Volatile: function does not return.
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              		@ link register save eliminated.
 348:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 349:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
ARM GAS  /tmp/ccMXfGQo.s 			page 31


 350:Core/Src/main.c ****   __disable_irq();
 1186              		.loc 1 350 3 view .LVU290
 1187              	.LBB28:
 1188              	.LBI28:
 1189              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.4.1
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     27. May 2021
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2021 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
ARM GAS  /tmp/ccMXfGQo.s 			page 32


  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccMXfGQo.s 			page 33


 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
ARM GAS  /tmp/ccMXfGQo.s 			page 34


 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute__((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_SEAL
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_SEAL              __StackSeal
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 189:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_SIZE
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_SIZE      8U
 192:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __TZ_STACK_SEAL_VALUE
 195:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __TZ_STACK_SEAL_VALUE     0xFEF5EDA5FEF5EDA5ULL
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_STACKSEAL_S (uint32_t* stackTop) {
 200:Drivers/CMSIS/Include/cmsis_gcc.h ****   *((uint64_t *)stackTop) = __TZ_STACK_SEAL_VALUE;
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 203:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 204:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 208:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 209:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 210:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 212:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 213:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 215:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 216:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 217:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 218:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 221:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 223:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 35


 224:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 225:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 226:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 227:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 229:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 230:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 233:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi":::"memory")
 235:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 239:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 240:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 241:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe":::"memory")
 243:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 244:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 245:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 247:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 248:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 249:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 252:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 253:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 254:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 255:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 256:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 257:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 258:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 259:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 261:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 264:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 265:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 268:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 271:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 273:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 274:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 275:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 277:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 278:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
ARM GAS  /tmp/ccMXfGQo.s 			page 36


 281:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 282:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 285:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 286:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 289:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 290:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 295:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 298:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 303:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 307:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 308:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 309:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 310:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 312:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 314:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 316:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 318:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 322:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 323:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 324:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 325:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 327:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 328:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 330:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 331:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 334:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 37


 338:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 339:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 343:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 344:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 348:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 349:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 350:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 351:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 354:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 355:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 359:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 362:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 363:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 366:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 367:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 370:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 371:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 375:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 381:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 382:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 385:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 388:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
 389:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 390:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 391:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 394:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccMXfGQo.s 			page 38


 395:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 396:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 398:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
 400:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __CLZ(uint32_t value)
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 405:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* Even though __builtin_clz produces a CLZ instruction on ARM, formally
 406:Drivers/CMSIS/Include/cmsis_gcc.h ****      __builtin_clz(0) is undefined behaviour, so handle this case specially.
 407:Drivers/CMSIS/Include/cmsis_gcc.h ****      This guarantees ARM-compatible results if happening to compile on a non-ARM
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****      target, and ensures the compiler doesn't decide to activate any
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****      optimisations using the logic "value was passed to __builtin_clz, so it
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****      is non-zero".
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****      ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
 412:Drivers/CMSIS/Include/cmsis_gcc.h ****      single CLZ instruction.
 413:Drivers/CMSIS/Include/cmsis_gcc.h ****    */
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (value == 0U)
 415:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 416:Drivers/CMSIS/Include/cmsis_gcc.h ****     return 32U;
 417:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 418:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_clz(value);
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 420:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 421:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 422:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 424:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 425:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 426:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 427:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
 428:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
 429:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 430:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 431:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 432:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
 433:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 434:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 435:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 436:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
 438:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 439:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 440:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 442:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 444:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 446:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 447:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 448:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
 450:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
 451:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
ARM GAS  /tmp/ccMXfGQo.s 			page 39


 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 453:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 456:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 457:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 458:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
 460:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 461:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 462:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 464:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
 465:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 471:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 486:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 491:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 492:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 493:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 495:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 498:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 499:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 500:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 501:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 502:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 503:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
 504:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 506:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 507:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 508:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
ARM GAS  /tmp/ccMXfGQo.s 			page 40


 509:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
 511:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 513:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 518:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 520:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
 521:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
 522:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 537:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Remove the exclusive lock
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Removes the exclusive lock which is created by LDREX.
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 540:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __CLREX(void)
 541:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 542:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("clrex" ::: "memory");
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 544:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 548:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 552:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 554:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 557:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 558:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (1..32)
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 560:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SSAT(ARG1, ARG2) \
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 564:Drivers/CMSIS/Include/cmsis_gcc.h ****   int32_t __RES, __ARG1 = (ARG1); \
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("ssat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
ARM GAS  /tmp/ccMXfGQo.s 			page 41


 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 568:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 572:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 573:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG1  Value to be saturated
 574:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  ARG2  Bit position to saturate to (0..31)
 575:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 577:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __USAT(ARG1, ARG2) \
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** __extension__ \
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** ({                          \
 580:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t __RES, __ARG1 = (ARG1); \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("usat %0, %1, %2" : "=r" (__RES) :  "I" (ARG2), "r" (__ARG1) : "cc" ); \
 582:Drivers/CMSIS/Include/cmsis_gcc.h ****   __RES; \
 583:Drivers/CMSIS/Include/cmsis_gcc.h ****  })
 584:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 585:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 586:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right with Extend (32 bit)
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Moves each bit of a bitstring right by one bit.
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****            The carry input is shifted in at the left end of the bitstring.
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to rotate
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 592:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RRX(uint32_t value)
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 596:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rrx %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 598:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 599:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 600:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 601:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 603:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (8 bit)
 604:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 8 bit value.
 605:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 606:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 608:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDRBT(volatile uint8_t *ptr)
 609:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 610:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 611:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 612:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, %1" : "=r" (result) : "Q" (*ptr) );
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 615:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 616:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrbt %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
 621:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 622:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 42


 623:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 625:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (16 bit)
 626:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 16 bit values.
 627:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 628:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 630:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDRHT(volatile uint16_t *ptr)
 631:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 633:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 634:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, %1" : "=r" (result) : "Q" (*ptr) );
 636:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 637:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
 638:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
 639:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrht %0, [%1]" : "=r" (result) : "r" (ptr) : "memory" );
 641:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 644:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 647:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDRT Unprivileged (32 bit)
 648:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged LDRT instruction for 32 bit values.
 649:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 650:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 652:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDRT(volatile uint32_t *ptr)
 653:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 654:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 655:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrt %0, %1" : "=r" (result) : "Q" (*ptr) );
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 661:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (8 bit)
 663:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 8 bit values.
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 665:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 666:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRBT(uint8_t value, volatile uint8_t *ptr)
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 669:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strbt %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 671:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 672:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 673:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (16 bit)
 675:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 16 bit values.
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRHT(uint16_t value, volatile uint16_t *ptr)
ARM GAS  /tmp/ccMXfGQo.s 			page 43


 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strht %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) );
 682:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 683:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 684:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STRT Unprivileged (32 bit)
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a Unprivileged STRT instruction for 32 bit values.
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 689:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 690:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STRT(uint32_t value, volatile uint32_t *ptr)
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 693:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strt %1, %0" : "=Q" (*ptr) : "r" (value) );
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 695:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 696:Drivers/CMSIS/Include/cmsis_gcc.h **** #else  /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 698:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 699:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 700:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Signed Saturate
 702:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates a signed value.
 703:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 704:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (1..32)
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int32_t __SSAT(int32_t val, uint32_t sat)
 708:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   if ((sat >= 1U) && (sat <= 32U))
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 711:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t max = (int32_t)((1U << (sat - 1U)) - 1U);
 712:Drivers/CMSIS/Include/cmsis_gcc.h ****     const int32_t min = -1 - max ;
 713:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > max)
 714:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 715:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 716:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < min)
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****       return min;
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 721:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   return val;
 723:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 724:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 726:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Unsigned Saturate
 727:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Saturates an unsigned value.
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to be saturated
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    sat  Bit position to saturate to (0..31)
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             Saturated value
 731:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 732:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __USAT(int32_t val, uint32_t sat)
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 734:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (sat <= 31U)
 735:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 736:Drivers/CMSIS/Include/cmsis_gcc.h ****     const uint32_t max = ((1U << sat) - 1U);
ARM GAS  /tmp/ccMXfGQo.s 			page 44


 737:Drivers/CMSIS/Include/cmsis_gcc.h ****     if (val > (int32_t)max)
 738:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****       return max;
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****     else if (val < 0)
 742:Drivers/CMSIS/Include/cmsis_gcc.h ****     {
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****       return 0U;
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 746:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (uint32_t)val;
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 749:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 751:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 752:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 755:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 757:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (8 bit)
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB instruction for 8 bit value.
 759:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 760:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 761:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 762:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAB(volatile uint8_t *ptr)
 763:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 765:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 766:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldab %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 767:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 769:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 772:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (16 bit)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH instruction for 16 bit values.
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 775:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAH(volatile uint16_t *ptr)
 778:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 781:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldah %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 787:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire (32 bit)
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA instruction for 32 bit values.
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDA(volatile uint32_t *ptr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccMXfGQo.s 			page 45


 794:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 795:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 796:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("lda %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 797:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 799:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 800:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (8 bit)
 803:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB instruction for 8 bit values.
 804:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 806:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLB(uint8_t value, volatile uint8_t *ptr)
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 809:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlb %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 814:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (16 bit)
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH instruction for 16 bit values.
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 817:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 818:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STLH(uint16_t value, volatile uint16_t *ptr)
 820:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlh %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 826:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release (32 bit)
 827:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL instruction for 32 bit values.
 828:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 829:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 830:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __STL(uint32_t value, volatile uint32_t *ptr)
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stl %1, %0" : "=Q" (*ptr) : "r" ((uint32_t)value) : "memory" );
 834:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 835:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 838:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (8 bit)
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAB exclusive instruction for 8 bit value.
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
 842:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDAEXB(volatile uint8_t *ptr)
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 845:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 846:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexb %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);
 849:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMXfGQo.s 			page 46


 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 853:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (16 bit)
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDAH exclusive instruction for 16 bit values.
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
 857:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDAEXH(volatile uint16_t *ptr)
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 860:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 861:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaexh %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);
 864:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 865:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Load-Acquire Exclusive (32 bit)
 869:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a LDA exclusive instruction for 32 bit values.
 870:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
 871:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
 872:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 873:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDAEX(volatile uint32_t *ptr)
 874:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 876:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 877:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldaex %0, %1" : "=r" (result) : "Q" (*ptr) : "memory" );
 878:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 883:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (8 bit)
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLB exclusive instruction for 8 bit values.
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 888:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 889:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 890:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXB(uint8_t value, volatile uint8_t *ptr)
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 892:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexb %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 896:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 897:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 898:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 899:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 900:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (16 bit)
 901:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STLH exclusive instruction for 16 bit values.
 902:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 904:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 906:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 907:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEXH(uint16_t value, volatile uint16_t *ptr)
ARM GAS  /tmp/ccMXfGQo.s 			page 47


 908:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 909:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 911:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlexh %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "mem
 912:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 914:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 915:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 916:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Store-Release Exclusive (32 bit)
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a STL exclusive instruction for 32 bit values.
 919:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
 920:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
 922:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 924:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STLEX(uint32_t value, volatile uint32_t *ptr)
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 926:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("stlex %0, %2, %1" : "=&r" (result), "=Q" (*ptr) : "r" ((uint32_t)value) : "memo
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 930:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 931:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 932:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@}*/ /* end of group CMSIS_Core_InstructionInterface */
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 937:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 939:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 940:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 945:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 946:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
 947:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 949:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 950:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 952:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 953:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 960:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 1190              		.loc 2 960 27 view .LVU291
 1191              	.LBB29:
 961:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 962:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
ARM GAS  /tmp/ccMXfGQo.s 			page 48


 1192              		.loc 2 962 3 view .LVU292
 1193              		.syntax unified
 1194              	@ 962 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1195 0000 72B6     		cpsid i
 1196              	@ 0 "" 2
 1197              		.thumb
 1198              		.syntax unified
 1199              	.L66:
 1200              	.LBE29:
 1201              	.LBE28:
 351:Core/Src/main.c ****   while (1)
 1202              		.loc 1 351 3 discriminator 1 view .LVU293
 352:Core/Src/main.c ****   {
 353:Core/Src/main.c ****   }
 1203              		.loc 1 353 3 discriminator 1 view .LVU294
 351:Core/Src/main.c ****   while (1)
 1204              		.loc 1 351 9 discriminator 1 view .LVU295
 1205 0002 FEE7     		b	.L66
 1206              		.cfi_endproc
 1207              	.LFE142:
 1209              		.section	.text.SystemClock_Config,"ax",%progbits
 1210              		.align	1
 1211              		.global	SystemClock_Config
 1212              		.syntax unified
 1213              		.thumb
 1214              		.thumb_func
 1215              		.fpu fpv4-sp-d16
 1217              	SystemClock_Config:
 1218              	.LFB136:
 156:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1219              		.loc 1 156 1 view -0
 1220              		.cfi_startproc
 1221              		@ args = 0, pretend = 0, frame = 80
 1222              		@ frame_needed = 0, uses_anonymous_args = 0
 1223 0000 00B5     		push	{lr}
 1224              		.cfi_def_cfa_offset 4
 1225              		.cfi_offset 14, -4
 1226 0002 95B0     		sub	sp, sp, #84
 1227              		.cfi_def_cfa_offset 88
 157:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1228              		.loc 1 157 3 view .LVU297
 157:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1229              		.loc 1 157 22 is_stmt 0 view .LVU298
 1230 0004 3422     		movs	r2, #52
 1231 0006 0021     		movs	r1, #0
 1232 0008 07A8     		add	r0, sp, #28
 1233 000a FFF7FEFF 		bl	memset
 1234              	.LVL88:
 158:Core/Src/main.c **** 
 1235              		.loc 1 158 3 is_stmt 1 view .LVU299
 158:Core/Src/main.c **** 
 1236              		.loc 1 158 22 is_stmt 0 view .LVU300
 1237 000e 0023     		movs	r3, #0
 1238 0010 0293     		str	r3, [sp, #8]
 1239 0012 0393     		str	r3, [sp, #12]
 1240 0014 0493     		str	r3, [sp, #16]
 1241 0016 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccMXfGQo.s 			page 49


 1242 0018 0693     		str	r3, [sp, #24]
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1243              		.loc 1 162 3 is_stmt 1 view .LVU301
 1244              	.LBB30:
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1245              		.loc 1 162 3 view .LVU302
 1246 001a 0093     		str	r3, [sp]
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1247              		.loc 1 162 3 view .LVU303
 1248 001c 204A     		ldr	r2, .L73
 1249 001e 116C     		ldr	r1, [r2, #64]
 1250 0020 41F08051 		orr	r1, r1, #268435456
 1251 0024 1164     		str	r1, [r2, #64]
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1252              		.loc 1 162 3 view .LVU304
 1253 0026 126C     		ldr	r2, [r2, #64]
 1254 0028 02F08052 		and	r2, r2, #268435456
 1255 002c 0092     		str	r2, [sp]
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1256              		.loc 1 162 3 view .LVU305
 1257 002e 009A     		ldr	r2, [sp]
 1258              	.LBE30:
 162:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 1259              		.loc 1 162 3 view .LVU306
 163:Core/Src/main.c **** 
 1260              		.loc 1 163 3 view .LVU307
 1261              	.LBB31:
 163:Core/Src/main.c **** 
 1262              		.loc 1 163 3 view .LVU308
 1263 0030 0193     		str	r3, [sp, #4]
 163:Core/Src/main.c **** 
 1264              		.loc 1 163 3 view .LVU309
 1265 0032 1C4A     		ldr	r2, .L73+4
 1266 0034 1368     		ldr	r3, [r2]
 1267 0036 23F44043 		bic	r3, r3, #49152
 1268 003a 43F48043 		orr	r3, r3, #16384
 1269 003e 1360     		str	r3, [r2]
 163:Core/Src/main.c **** 
 1270              		.loc 1 163 3 view .LVU310
 1271 0040 1368     		ldr	r3, [r2]
 1272 0042 03F44043 		and	r3, r3, #49152
 1273 0046 0193     		str	r3, [sp, #4]
 163:Core/Src/main.c **** 
 1274              		.loc 1 163 3 view .LVU311
 1275 0048 019B     		ldr	r3, [sp, #4]
 1276              	.LBE31:
 163:Core/Src/main.c **** 
 1277              		.loc 1 163 3 view .LVU312
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1278              		.loc 1 168 3 view .LVU313
 168:Core/Src/main.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 1279              		.loc 1 168 36 is_stmt 0 view .LVU314
 1280 004a 0123     		movs	r3, #1
 1281 004c 0793     		str	r3, [sp, #28]
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 1282              		.loc 1 169 3 is_stmt 1 view .LVU315
 169:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
ARM GAS  /tmp/ccMXfGQo.s 			page 50


 1283              		.loc 1 169 30 is_stmt 0 view .LVU316
 1284 004e 4FF48033 		mov	r3, #65536
 1285 0052 0893     		str	r3, [sp, #32]
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1286              		.loc 1 170 3 is_stmt 1 view .LVU317
 170:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 1287              		.loc 1 170 34 is_stmt 0 view .LVU318
 1288 0054 0223     		movs	r3, #2
 1289 0056 0D93     		str	r3, [sp, #52]
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 1290              		.loc 1 171 3 is_stmt 1 view .LVU319
 171:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLM = 4;
 1291              		.loc 1 171 35 is_stmt 0 view .LVU320
 1292 0058 4FF48002 		mov	r2, #4194304
 1293 005c 0E92     		str	r2, [sp, #56]
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1294              		.loc 1 172 3 is_stmt 1 view .LVU321
 172:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLN = 90;
 1295              		.loc 1 172 30 is_stmt 0 view .LVU322
 1296 005e 0422     		movs	r2, #4
 1297 0060 0F92     		str	r2, [sp, #60]
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1298              		.loc 1 173 3 is_stmt 1 view .LVU323
 173:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 1299              		.loc 1 173 30 is_stmt 0 view .LVU324
 1300 0062 5A21     		movs	r1, #90
 1301 0064 1091     		str	r1, [sp, #64]
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1302              		.loc 1 174 3 is_stmt 1 view .LVU325
 174:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLQ = 2;
 1303              		.loc 1 174 30 is_stmt 0 view .LVU326
 1304 0066 1192     		str	r2, [sp, #68]
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1305              		.loc 1 175 3 is_stmt 1 view .LVU327
 175:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLR = 2;
 1306              		.loc 1 175 30 is_stmt 0 view .LVU328
 1307 0068 1293     		str	r3, [sp, #72]
 176:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1308              		.loc 1 176 3 is_stmt 1 view .LVU329
 176:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1309              		.loc 1 176 30 is_stmt 0 view .LVU330
 1310 006a 1393     		str	r3, [sp, #76]
 177:Core/Src/main.c ****   {
 1311              		.loc 1 177 3 is_stmt 1 view .LVU331
 177:Core/Src/main.c ****   {
 1312              		.loc 1 177 7 is_stmt 0 view .LVU332
 1313 006c 07A8     		add	r0, sp, #28
 1314 006e FFF7FEFF 		bl	HAL_RCC_OscConfig
 1315              	.LVL89:
 177:Core/Src/main.c ****   {
 1316              		.loc 1 177 6 view .LVU333
 1317 0072 88B9     		cbnz	r0, .L71
 184:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1318              		.loc 1 184 3 is_stmt 1 view .LVU334
 184:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1319              		.loc 1 184 31 is_stmt 0 view .LVU335
 1320 0074 0F23     		movs	r3, #15
ARM GAS  /tmp/ccMXfGQo.s 			page 51


 1321 0076 0293     		str	r3, [sp, #8]
 186:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1322              		.loc 1 186 3 is_stmt 1 view .LVU336
 186:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1323              		.loc 1 186 34 is_stmt 0 view .LVU337
 1324 0078 0323     		movs	r3, #3
 1325 007a 0393     		str	r3, [sp, #12]
 187:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1326              		.loc 1 187 3 is_stmt 1 view .LVU338
 187:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 1327              		.loc 1 187 35 is_stmt 0 view .LVU339
 1328 007c 0023     		movs	r3, #0
 1329 007e 0493     		str	r3, [sp, #16]
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1330              		.loc 1 188 3 is_stmt 1 view .LVU340
 188:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1331              		.loc 1 188 36 is_stmt 0 view .LVU341
 1332 0080 4FF48052 		mov	r2, #4096
 1333 0084 0592     		str	r2, [sp, #20]
 189:Core/Src/main.c **** 
 1334              		.loc 1 189 3 is_stmt 1 view .LVU342
 189:Core/Src/main.c **** 
 1335              		.loc 1 189 36 is_stmt 0 view .LVU343
 1336 0086 0693     		str	r3, [sp, #24]
 191:Core/Src/main.c ****   {
 1337              		.loc 1 191 3 is_stmt 1 view .LVU344
 191:Core/Src/main.c ****   {
 1338              		.loc 1 191 7 is_stmt 0 view .LVU345
 1339 0088 0221     		movs	r1, #2
 1340 008a 02A8     		add	r0, sp, #8
 1341 008c FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1342              	.LVL90:
 191:Core/Src/main.c ****   {
 1343              		.loc 1 191 6 view .LVU346
 1344 0090 20B9     		cbnz	r0, .L72
 195:Core/Src/main.c **** 
 1345              		.loc 1 195 1 view .LVU347
 1346 0092 15B0     		add	sp, sp, #84
 1347              		.cfi_remember_state
 1348              		.cfi_def_cfa_offset 4
 1349              		@ sp needed
 1350 0094 5DF804FB 		ldr	pc, [sp], #4
 1351              	.L71:
 1352              		.cfi_restore_state
 179:Core/Src/main.c ****   }
 1353              		.loc 1 179 5 is_stmt 1 view .LVU348
 1354 0098 FFF7FEFF 		bl	Error_Handler
 1355              	.LVL91:
 1356              	.L72:
 193:Core/Src/main.c ****   }
 1357              		.loc 1 193 5 view .LVU349
 1358 009c FFF7FEFF 		bl	Error_Handler
 1359              	.LVL92:
 1360              	.L74:
 1361              		.align	2
 1362              	.L73:
 1363 00a0 00380240 		.word	1073887232
ARM GAS  /tmp/ccMXfGQo.s 			page 52


 1364 00a4 00700040 		.word	1073770496
 1365              		.cfi_endproc
 1366              	.LFE136:
 1368              		.section	.text.main,"ax",%progbits
 1369              		.align	1
 1370              		.global	main
 1371              		.syntax unified
 1372              		.thumb
 1373              		.thumb_func
 1374              		.fpu fpv4-sp-d16
 1376              	main:
 1377              	.LFB135:
 106:Core/Src/main.c **** 
 1378              		.loc 1 106 1 view -0
 1379              		.cfi_startproc
 1380              		@ Volatile: function does not return.
 1381              		@ args = 0, pretend = 0, frame = 0
 1382              		@ frame_needed = 0, uses_anonymous_args = 0
 1383 0000 08B5     		push	{r3, lr}
 1384              		.cfi_def_cfa_offset 8
 1385              		.cfi_offset 3, -8
 1386              		.cfi_offset 14, -4
 115:Core/Src/main.c **** 
 1387              		.loc 1 115 3 view .LVU351
 1388 0002 FFF7FEFF 		bl	HAL_Init
 1389              	.LVL93:
 122:Core/Src/main.c **** 
 1390              		.loc 1 122 3 view .LVU352
 1391 0006 FFF7FEFF 		bl	SystemClock_Config
 1392              	.LVL94:
 129:Core/Src/main.c ****   MX_CAN1_Init();
 1393              		.loc 1 129 3 view .LVU353
 1394 000a FFF7FEFF 		bl	MX_GPIO_Init
 1395              	.LVL95:
 130:Core/Src/main.c ****   MX_TIM2_Init();
 1396              		.loc 1 130 3 view .LVU354
 1397 000e FFF7FEFF 		bl	MX_CAN1_Init
 1398              	.LVL96:
 131:Core/Src/main.c ****   MX_USART2_UART_Init();
 1399              		.loc 1 131 3 view .LVU355
 1400 0012 FFF7FEFF 		bl	MX_TIM2_Init
 1401              	.LVL97:
 132:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1402              		.loc 1 132 3 view .LVU356
 1403 0016 FFF7FEFF 		bl	MX_USART2_UART_Init
 1404              	.LVL98:
 134:Core/Src/main.c **** 
 1405              		.loc 1 134 3 view .LVU357
 1406 001a FFF7FEFF 		bl	InitializeCANMessage
 1407              	.LVL99:
 136:Core/Src/main.c **** 
 1408              		.loc 1 136 3 view .LVU358
 1409 001e 0248     		ldr	r0, .L78
 1410 0020 FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1411              	.LVL100:
 1412              	.L76:
 142:Core/Src/main.c ****   {
ARM GAS  /tmp/ccMXfGQo.s 			page 53


 1413              		.loc 1 142 3 discriminator 1 view .LVU359
 147:Core/Src/main.c ****   /* USER CODE END 3 */
 1414              		.loc 1 147 3 discriminator 1 view .LVU360
 142:Core/Src/main.c ****   {
 1415              		.loc 1 142 9 discriminator 1 view .LVU361
 1416 0024 FEE7     		b	.L76
 1417              	.L79:
 1418 0026 00BF     		.align	2
 1419              	.L78:
 1420 0028 00000000 		.word	htim2
 1421              		.cfi_endproc
 1422              	.LFE135:
 1424              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 1425              		.align	1
 1426              		.global	HAL_TIM_PeriodElapsedCallback
 1427              		.syntax unified
 1428              		.thumb
 1429              		.thumb_func
 1430              		.fpu fpv4-sp-d16
 1432              	HAL_TIM_PeriodElapsedCallback:
 1433              	.LVL101:
 1434              	.LFB138:
 219:Core/Src/main.c ****   if(htim->Instance==TIM2){
 1435              		.loc 1 219 60 view -0
 1436              		.cfi_startproc
 1437              		@ args = 0, pretend = 0, frame = 32
 1438              		@ frame_needed = 0, uses_anonymous_args = 0
 220:Core/Src/main.c ****     uint32_t packedData=PackCANMessage(&canMessage);//we packed the canMessage
 1439              		.loc 1 220 3 view .LVU363
 220:Core/Src/main.c ****     uint32_t packedData=PackCANMessage(&canMessage);//we packed the canMessage
 1440              		.loc 1 220 10 is_stmt 0 view .LVU364
 1441 0000 0368     		ldr	r3, [r0]
 220:Core/Src/main.c ****     uint32_t packedData=PackCANMessage(&canMessage);//we packed the canMessage
 1442              		.loc 1 220 5 view .LVU365
 1443 0002 B3F1804F 		cmp	r3, #1073741824
 1444 0006 00D0     		beq	.L87
 1445 0008 7047     		bx	lr
 1446              	.L87:
 219:Core/Src/main.c ****   if(htim->Instance==TIM2){
 1447              		.loc 1 219 60 view .LVU366
 1448 000a 00B5     		push	{lr}
 1449              		.cfi_def_cfa_offset 4
 1450              		.cfi_offset 14, -4
 1451 000c 89B0     		sub	sp, sp, #36
 1452              		.cfi_def_cfa_offset 40
 1453              	.LBB32:
 221:Core/Src/main.c **** 
 1454              		.loc 1 221 5 is_stmt 1 view .LVU367
 221:Core/Src/main.c **** 
 1455              		.loc 1 221 25 is_stmt 0 view .LVU368
 1456 000e 1148     		ldr	r0, .L89
 1457              	.LVL102:
 221:Core/Src/main.c **** 
 1458              		.loc 1 221 25 view .LVU369
 1459 0010 FFF7FEFF 		bl	PackCANMessage
 1460              	.LVL103:
 223:Core/Src/main.c ****     dataPerByte[0] = (uint8_t)(packedData & 0xFF);//LSB because little-endian
ARM GAS  /tmp/ccMXfGQo.s 			page 54


 1461              		.loc 1 223 5 is_stmt 1 view .LVU370
 224:Core/Src/main.c ****     dataPerByte[1] = (uint8_t)((packedData >> 8) & 0xFF);
 1462              		.loc 1 224 5 view .LVU371
 224:Core/Src/main.c ****     dataPerByte[1] = (uint8_t)((packedData >> 8) & 0xFF);
 1463              		.loc 1 224 20 is_stmt 0 view .LVU372
 1464 0014 8DF80000 		strb	r0, [sp]
 225:Core/Src/main.c ****     dataPerByte[2] = (uint8_t)((packedData >> 16) & 0xFF);
 1465              		.loc 1 225 5 is_stmt 1 view .LVU373
 225:Core/Src/main.c ****     dataPerByte[2] = (uint8_t)((packedData >> 16) & 0xFF);
 1466              		.loc 1 225 22 is_stmt 0 view .LVU374
 1467 0018 C0F30723 		ubfx	r3, r0, #8, #8
 225:Core/Src/main.c ****     dataPerByte[2] = (uint8_t)((packedData >> 16) & 0xFF);
 1468              		.loc 1 225 20 view .LVU375
 1469 001c 8DF80130 		strb	r3, [sp, #1]
 226:Core/Src/main.c ****     dataPerByte[3] = (uint8_t)((packedData >> 24) & 0xFF); //MSB 
 1470              		.loc 1 226 5 is_stmt 1 view .LVU376
 226:Core/Src/main.c ****     dataPerByte[3] = (uint8_t)((packedData >> 24) & 0xFF); //MSB 
 1471              		.loc 1 226 22 is_stmt 0 view .LVU377
 1472 0020 C0F30743 		ubfx	r3, r0, #16, #8
 226:Core/Src/main.c ****     dataPerByte[3] = (uint8_t)((packedData >> 24) & 0xFF); //MSB 
 1473              		.loc 1 226 20 view .LVU378
 1474 0024 8DF80230 		strb	r3, [sp, #2]
 227:Core/Src/main.c ****     //dataPerByte=0x00000100
 1475              		.loc 1 227 5 is_stmt 1 view .LVU379
 227:Core/Src/main.c ****     //dataPerByte=0x00000100
 1476              		.loc 1 227 22 is_stmt 0 view .LVU380
 1477 0028 000E     		lsrs	r0, r0, #24
 1478              	.LVL104:
 227:Core/Src/main.c ****     //dataPerByte=0x00000100
 1479              		.loc 1 227 20 view .LVU381
 1480 002a 8DF80300 		strb	r0, [sp, #3]
 230:Core/Src/main.c ****     CAN_TxHeaderTypeDef TxHeader;
 1481              		.loc 1 230 5 is_stmt 1 view .LVU382
 231:Core/Src/main.c ****     TxHeader.DLC=4;//size in bytes
 1482              		.loc 1 231 5 view .LVU383
 232:Core/Src/main.c ****     TxHeader.IDE=CAN_ID_STD;
 1483              		.loc 1 232 5 view .LVU384
 232:Core/Src/main.c ****     TxHeader.IDE=CAN_ID_STD;
 1484              		.loc 1 232 17 is_stmt 0 view .LVU385
 1485 002e 0423     		movs	r3, #4
 1486 0030 0693     		str	r3, [sp, #24]
 233:Core/Src/main.c ****     TxHeader.RTR=CAN_RTR_DATA;
 1487              		.loc 1 233 5 is_stmt 1 view .LVU386
 233:Core/Src/main.c ****     TxHeader.RTR=CAN_RTR_DATA;
 1488              		.loc 1 233 17 is_stmt 0 view .LVU387
 1489 0032 0022     		movs	r2, #0
 1490 0034 0492     		str	r2, [sp, #16]
 234:Core/Src/main.c ****     TxHeader.StdId=0x4; //msg ID
 1491              		.loc 1 234 5 is_stmt 1 view .LVU388
 234:Core/Src/main.c ****     TxHeader.StdId=0x4; //msg ID
 1492              		.loc 1 234 17 is_stmt 0 view .LVU389
 1493 0036 0592     		str	r2, [sp, #20]
 235:Core/Src/main.c **** 
 1494              		.loc 1 235 5 is_stmt 1 view .LVU390
 235:Core/Src/main.c **** 
 1495              		.loc 1 235 19 is_stmt 0 view .LVU391
 1496 0038 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccMXfGQo.s 			page 55


 237:Core/Src/main.c ****       
 1497              		.loc 1 237 5 is_stmt 1 view .LVU392
 237:Core/Src/main.c ****       
 1498              		.loc 1 237 9 is_stmt 0 view .LVU393
 1499 003a 6B44     		add	r3, sp, r3
 1500 003c 6A46     		mov	r2, sp
 1501 003e 02A9     		add	r1, sp, #8
 1502 0040 0548     		ldr	r0, .L89+4
 1503 0042 FFF7FEFF 		bl	HAL_CAN_AddTxMessage
 1504              	.LVL105:
 237:Core/Src/main.c ****       
 1505              		.loc 1 237 8 view .LVU394
 1506 0046 10B9     		cbnz	r0, .L88
 1507              	.LBE32:
 242:Core/Src/main.c **** void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 1508              		.loc 1 242 1 view .LVU395
 1509 0048 09B0     		add	sp, sp, #36
 1510              		.cfi_remember_state
 1511              		.cfi_def_cfa_offset 4
 1512              		@ sp needed
 1513 004a 5DF804FB 		ldr	pc, [sp], #4
 1514              	.L88:
 1515              		.cfi_restore_state
 1516              	.LBB33:
 239:Core/Src/main.c ****     }
 1517              		.loc 1 239 7 is_stmt 1 view .LVU396
 1518 004e FFF7FEFF 		bl	Error_Handler
 1519              	.LVL106:
 1520              	.L90:
 1521 0052 00BF     		.align	2
 1522              	.L89:
 1523 0054 00000000 		.word	.LANCHOR0
 1524 0058 00000000 		.word	hcan1
 1525              	.LBE33:
 1526              		.cfi_endproc
 1527              	.LFE138:
 1529              		.global	canMessage
 1530              		.section	.bss.canMessage,"aw",%nobits
 1531              		.align	2
 1532              		.set	.LANCHOR0,. + 0
 1535              	canMessage:
 1536 0000 0000     		.space	2
 1537              		.text
 1538              	.Letext0:
 1539              		.file 3 "/usr/lib/gcc/arm-none-eabi/10.3.1/include/stdint.h"
 1540              		.file 4 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f446xx.h"
 1541              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 1542              		.file 6 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1543              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc_ex.h"
 1544              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_rcc.h"
 1545              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1546              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_can.h"
 1547              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_tim.h"
 1548              		.file 12 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1549              		.file 13 "Core/Inc/can.h"
 1550              		.file 14 "Core/Inc/tim.h"
 1551              		.file 15 "Core/Inc/usart.h"
ARM GAS  /tmp/ccMXfGQo.s 			page 56


 1552              		.file 16 "<built-in>"
 1553              		.file 17 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1554              		.file 18 "Core/Inc/gpio.h"
ARM GAS  /tmp/ccMXfGQo.s 			page 57


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccMXfGQo.s:18     .text.InitializeCANMessage:0000000000000000 $t
     /tmp/ccMXfGQo.s:26     .text.InitializeCANMessage:0000000000000000 InitializeCANMessage
     /tmp/ccMXfGQo.s:115    .text.InitializeCANMessage:000000000000007c $d
     /tmp/ccMXfGQo.s:120    .text.PackCANMessage:0000000000000000 $t
     /tmp/ccMXfGQo.s:127    .text.PackCANMessage:0000000000000000 PackCANMessage
     /tmp/ccMXfGQo.s:236    .rodata.HAL_CAN_RxFifo0MsgPendingCallback.str1.4:0000000000000000 $d
     /tmp/ccMXfGQo.s:240    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 $t
     /tmp/ccMXfGQo.s:247    .text.HAL_CAN_RxFifo0MsgPendingCallback:0000000000000000 HAL_CAN_RxFifo0MsgPendingCallback
     /tmp/ccMXfGQo.s:335    .text.HAL_CAN_RxFifo0MsgPendingCallback:000000000000005c $d
     /tmp/ccMXfGQo.s:341    .rodata.CAN_ErrorHandler.str1.4:0000000000000000 $d
     /tmp/ccMXfGQo.s:414    .text.CAN_ErrorHandler:0000000000000000 $t
     /tmp/ccMXfGQo.s:421    .text.CAN_ErrorHandler:0000000000000000 CAN_ErrorHandler
     /tmp/ccMXfGQo.s:1098   .text.CAN_ErrorHandler:00000000000003b8 $d
     /tmp/ccMXfGQo.s:1128   .text.HAL_CAN_ErrorCallback:0000000000000000 $t
     /tmp/ccMXfGQo.s:1135   .text.HAL_CAN_ErrorCallback:0000000000000000 HAL_CAN_ErrorCallback
     /tmp/ccMXfGQo.s:1166   .text.HAL_CAN_ErrorCallback:0000000000000010 $d
     /tmp/ccMXfGQo.s:1171   .text.Error_Handler:0000000000000000 $t
     /tmp/ccMXfGQo.s:1178   .text.Error_Handler:0000000000000000 Error_Handler
     /tmp/ccMXfGQo.s:1210   .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccMXfGQo.s:1217   .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccMXfGQo.s:1363   .text.SystemClock_Config:00000000000000a0 $d
     /tmp/ccMXfGQo.s:1369   .text.main:0000000000000000 $t
     /tmp/ccMXfGQo.s:1376   .text.main:0000000000000000 main
     /tmp/ccMXfGQo.s:1420   .text.main:0000000000000028 $d
     /tmp/ccMXfGQo.s:1425   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccMXfGQo.s:1432   .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccMXfGQo.s:1523   .text.HAL_TIM_PeriodElapsedCallback:0000000000000054 $d
     /tmp/ccMXfGQo.s:1535   .bss.canMessage:0000000000000000 canMessage
     /tmp/ccMXfGQo.s:1531   .bss.canMessage:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_CAN_GetRxMessage
sprintf
strlen
HAL_UART_Transmit
huart2
HAL_CAN_GetError
HAL_CAN_ResetError
hcan1
memset
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_Init
MX_GPIO_Init
MX_CAN1_Init
MX_TIM2_Init
MX_USART2_UART_Init
HAL_TIM_Base_Start_IT
htim2
HAL_CAN_AddTxMessage
